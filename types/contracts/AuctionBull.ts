/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace AuctionBull {
  export type OrderStruct = {
    bidId: BigNumberish;
    trader: string;
    quantity: BigNumberish;
    price: BigNumberish;
    isBuying: boolean;
    expiry: BigNumberish;
    nonce: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type OrderStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ] & {
    bidId: BigNumber;
    trader: string;
    quantity: BigNumber;
    price: BigNumber;
    isBuying: boolean;
    expiry: BigNumber;
    nonce: BigNumber;
    v: number;
    r: string;
    s: string;
  };
}

export interface AuctionBullInterface extends utils.Interface {
  contractName: "AuctionBull";
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MAX_FULL_REBALANCE_CLEARING_PRICE_TOLERANCE()": FunctionFragment;
    "MAX_REBALANCE_WETH_LIMIT_PRICE_TOLERANCE()": FunctionFragment;
    "auctionManager()": FunctionFragment;
    "crLower()": FunctionFragment;
    "crUpper()": FunctionFragment;
    "deltaLower()": FunctionFragment;
    "deltaUpper()": FunctionFragment;
    "fullRebalance((uint256,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32)[],uint256,uint256,uint256,uint256,uint24,bool)": FunctionFragment;
    "fullRebalanceClearingPriceTolerance()": FunctionFragment;
    "getCurrentDeltaAndCollatRatio()": FunctionFragment;
    "leverageRebalance(bool,uint256,uint256,uint24)": FunctionFragment;
    "nonces(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "rebalanceWethLimitPriceTolerance()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAuctionManager(address)": FunctionFragment;
    "setCrUpperAndLower(uint256,uint256)": FunctionFragment;
    "setDeltaUpperAndLower(uint256,uint256)": FunctionFragment;
    "setFullRebalanceClearingPriceTolerance(uint256)": FunctionFragment;
    "setRebalanceWethLimitPriceTolerance(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "useNonce(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FULL_REBALANCE_CLEARING_PRICE_TOLERANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REBALANCE_WETH_LIMIT_PRICE_TOLERANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crLower", values?: undefined): string;
  encodeFunctionData(functionFragment: "crUpper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deltaLower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deltaUpper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fullRebalance",
    values: [
      AuctionBull.OrderStruct[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fullRebalanceClearingPriceTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDeltaAndCollatRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leverageRebalance",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceWethLimitPriceTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrUpperAndLower",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeltaUpperAndLower",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFullRebalanceClearingPriceTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceWethLimitPriceTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "useNonce",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FULL_REBALANCE_CLEARING_PRICE_TOLERANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REBALANCE_WETH_LIMIT_PRICE_TOLERANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crLower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crUpper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deltaLower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deltaUpper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fullRebalanceClearingPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDeltaAndCollatRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leverageRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceWethLimitPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrUpperAndLower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeltaUpperAndLower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFullRebalanceClearingPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceWethLimitPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useNonce", data: BytesLike): Result;

  events: {
    "FullRebalance(uint256,uint256,bool,uint256,uint256)": EventFragment;
    "LeverageRebalance(bool,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAuctionManager(address,address)": EventFragment;
    "SetCrUpperAndLower(uint256,uint256,uint256,uint256)": EventFragment;
    "SetDeltaUpperAndLower(uint256,uint256,uint256,uint256)": EventFragment;
    "SetFullRebalanceClearingPriceTolerance(uint256,uint256)": EventFragment;
    "SetRebalanceWethLimitPriceTolerance(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FullRebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeverageRebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAuctionManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCrUpperAndLower"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDeltaUpperAndLower"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetFullRebalanceClearingPriceTolerance"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetRebalanceWethLimitPriceTolerance"
  ): EventFragment;
}

export type FullRebalanceEvent = TypedEvent<
  [BigNumber, BigNumber, boolean, BigNumber, BigNumber],
  {
    crabAmount: BigNumber;
    clearingPrice: BigNumber;
    isDepositingInCrab: boolean;
    wPowerPerpAmount: BigNumber;
    wethTargetInEuler: BigNumber;
  }
>;

export type FullRebalanceEventFilter = TypedEventFilter<FullRebalanceEvent>;

export type LeverageRebalanceEvent = TypedEvent<
  [boolean, BigNumber, BigNumber],
  { isSellingUsdc: boolean; usdcAmount: BigNumber; wethLimitAmount: BigNumber }
>;

export type LeverageRebalanceEventFilter =
  TypedEventFilter<LeverageRebalanceEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SetAuctionManagerEvent = TypedEvent<
  [string, string],
  { newAuctionManager: string; oldAuctionManager: string }
>;

export type SetAuctionManagerEventFilter =
  TypedEventFilter<SetAuctionManagerEvent>;

export type SetCrUpperAndLowerEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    oldCrLower: BigNumber;
    oldCrUpper: BigNumber;
    newCrLower: BigNumber;
    newCrUpper: BigNumber;
  }
>;

export type SetCrUpperAndLowerEventFilter =
  TypedEventFilter<SetCrUpperAndLowerEvent>;

export type SetDeltaUpperAndLowerEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    oldDeltaLower: BigNumber;
    oldDeltaUpper: BigNumber;
    newDeltaLower: BigNumber;
    newDeltaUpper: BigNumber;
  }
>;

export type SetDeltaUpperAndLowerEventFilter =
  TypedEventFilter<SetDeltaUpperAndLowerEvent>;

export type SetFullRebalanceClearingPriceToleranceEvent = TypedEvent<
  [BigNumber, BigNumber],
  { _oldPriceTolerance: BigNumber; _newPriceTolerance: BigNumber }
>;

export type SetFullRebalanceClearingPriceToleranceEventFilter =
  TypedEventFilter<SetFullRebalanceClearingPriceToleranceEvent>;

export type SetRebalanceWethLimitPriceToleranceEvent = TypedEvent<
  [BigNumber, BigNumber],
  {
    _oldWethLimitPriceTolerance: BigNumber;
    _newWethLimitPriceTolerance: BigNumber;
  }
>;

export type SetRebalanceWethLimitPriceToleranceEventFilter =
  TypedEventFilter<SetRebalanceWethLimitPriceToleranceEvent>;

export interface AuctionBull extends BaseContract {
  contractName: "AuctionBull";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionBullInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MAX_FULL_REBALANCE_CLEARING_PRICE_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_REBALANCE_WETH_LIMIT_PRICE_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    auctionManager(overrides?: CallOverrides): Promise<[string]>;

    crLower(overrides?: CallOverrides): Promise<[BigNumber]>;

    crUpper(overrides?: CallOverrides): Promise<[BigNumber]>;

    deltaLower(overrides?: CallOverrides): Promise<[BigNumber]>;

    deltaUpper(overrides?: CallOverrides): Promise<[BigNumber]>;

    fullRebalance(
      _orders: AuctionBull.OrderStruct[],
      _crabAmount: BigNumberish,
      _clearingPrice: BigNumberish,
      _wethTargetInEuler: BigNumberish,
      _wethLimitPrice: BigNumberish,
      _ethUsdcPoolFee: BigNumberish,
      _isDepositingInCrab: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fullRebalanceClearingPriceTolerance(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentDeltaAndCollatRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    leverageRebalance(
      _isSellingUsdc: boolean,
      _usdcAmount: BigNumberish,
      _wethLimitPrice: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebalanceWethLimitPriceTolerance(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionManager(
      _auctionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCrUpperAndLower(
      _crLower: BigNumberish,
      _crUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDeltaUpperAndLower(
      _deltaLower: BigNumberish,
      _deltaUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFullRebalanceClearingPriceTolerance(
      _fullRebalancePriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRebalanceWethLimitPriceTolerance(
      _rebalanceWethLimitPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    useNonce(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MAX_FULL_REBALANCE_CLEARING_PRICE_TOLERANCE(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_REBALANCE_WETH_LIMIT_PRICE_TOLERANCE(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  auctionManager(overrides?: CallOverrides): Promise<string>;

  crLower(overrides?: CallOverrides): Promise<BigNumber>;

  crUpper(overrides?: CallOverrides): Promise<BigNumber>;

  deltaLower(overrides?: CallOverrides): Promise<BigNumber>;

  deltaUpper(overrides?: CallOverrides): Promise<BigNumber>;

  fullRebalance(
    _orders: AuctionBull.OrderStruct[],
    _crabAmount: BigNumberish,
    _clearingPrice: BigNumberish,
    _wethTargetInEuler: BigNumberish,
    _wethLimitPrice: BigNumberish,
    _ethUsdcPoolFee: BigNumberish,
    _isDepositingInCrab: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fullRebalanceClearingPriceTolerance(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentDeltaAndCollatRatio(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  leverageRebalance(
    _isSellingUsdc: boolean,
    _usdcAmount: BigNumberish,
    _wethLimitPrice: BigNumberish,
    _poolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebalanceWethLimitPriceTolerance(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionManager(
    _auctionManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCrUpperAndLower(
    _crLower: BigNumberish,
    _crUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDeltaUpperAndLower(
    _deltaLower: BigNumberish,
    _deltaUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFullRebalanceClearingPriceTolerance(
    _fullRebalancePriceTolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRebalanceWethLimitPriceTolerance(
    _rebalanceWethLimitPriceTolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  useNonce(
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MAX_FULL_REBALANCE_CLEARING_PRICE_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_REBALANCE_WETH_LIMIT_PRICE_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionManager(overrides?: CallOverrides): Promise<string>;

    crLower(overrides?: CallOverrides): Promise<BigNumber>;

    crUpper(overrides?: CallOverrides): Promise<BigNumber>;

    deltaLower(overrides?: CallOverrides): Promise<BigNumber>;

    deltaUpper(overrides?: CallOverrides): Promise<BigNumber>;

    fullRebalance(
      _orders: AuctionBull.OrderStruct[],
      _crabAmount: BigNumberish,
      _clearingPrice: BigNumberish,
      _wethTargetInEuler: BigNumberish,
      _wethLimitPrice: BigNumberish,
      _ethUsdcPoolFee: BigNumberish,
      _isDepositingInCrab: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    fullRebalanceClearingPriceTolerance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentDeltaAndCollatRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    leverageRebalance(
      _isSellingUsdc: boolean,
      _usdcAmount: BigNumberish,
      _wethLimitPrice: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebalanceWethLimitPriceTolerance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAuctionManager(
      _auctionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCrUpperAndLower(
      _crLower: BigNumberish,
      _crUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeltaUpperAndLower(
      _deltaLower: BigNumberish,
      _deltaUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFullRebalanceClearingPriceTolerance(
      _fullRebalancePriceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalanceWethLimitPriceTolerance(
      _rebalanceWethLimitPriceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    useNonce(_nonce: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FullRebalance(uint256,uint256,bool,uint256,uint256)"(
      crabAmount?: null,
      clearingPrice?: null,
      isDepositingInCrab?: null,
      wPowerPerpAmount?: null,
      wethTargetInEuler?: null
    ): FullRebalanceEventFilter;
    FullRebalance(
      crabAmount?: null,
      clearingPrice?: null,
      isDepositingInCrab?: null,
      wPowerPerpAmount?: null,
      wethTargetInEuler?: null
    ): FullRebalanceEventFilter;

    "LeverageRebalance(bool,uint256,uint256)"(
      isSellingUsdc?: null,
      usdcAmount?: null,
      wethLimitAmount?: null
    ): LeverageRebalanceEventFilter;
    LeverageRebalance(
      isSellingUsdc?: null,
      usdcAmount?: null,
      wethLimitAmount?: null
    ): LeverageRebalanceEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetAuctionManager(address,address)"(
      newAuctionManager?: null,
      oldAuctionManager?: null
    ): SetAuctionManagerEventFilter;
    SetAuctionManager(
      newAuctionManager?: null,
      oldAuctionManager?: null
    ): SetAuctionManagerEventFilter;

    "SetCrUpperAndLower(uint256,uint256,uint256,uint256)"(
      oldCrLower?: null,
      oldCrUpper?: null,
      newCrLower?: null,
      newCrUpper?: null
    ): SetCrUpperAndLowerEventFilter;
    SetCrUpperAndLower(
      oldCrLower?: null,
      oldCrUpper?: null,
      newCrLower?: null,
      newCrUpper?: null
    ): SetCrUpperAndLowerEventFilter;

    "SetDeltaUpperAndLower(uint256,uint256,uint256,uint256)"(
      oldDeltaLower?: null,
      oldDeltaUpper?: null,
      newDeltaLower?: null,
      newDeltaUpper?: null
    ): SetDeltaUpperAndLowerEventFilter;
    SetDeltaUpperAndLower(
      oldDeltaLower?: null,
      oldDeltaUpper?: null,
      newDeltaLower?: null,
      newDeltaUpper?: null
    ): SetDeltaUpperAndLowerEventFilter;

    "SetFullRebalanceClearingPriceTolerance(uint256,uint256)"(
      _oldPriceTolerance?: null,
      _newPriceTolerance?: null
    ): SetFullRebalanceClearingPriceToleranceEventFilter;
    SetFullRebalanceClearingPriceTolerance(
      _oldPriceTolerance?: null,
      _newPriceTolerance?: null
    ): SetFullRebalanceClearingPriceToleranceEventFilter;

    "SetRebalanceWethLimitPriceTolerance(uint256,uint256)"(
      _oldWethLimitPriceTolerance?: null,
      _newWethLimitPriceTolerance?: null
    ): SetRebalanceWethLimitPriceToleranceEventFilter;
    SetRebalanceWethLimitPriceTolerance(
      _oldWethLimitPriceTolerance?: null,
      _newWethLimitPriceTolerance?: null
    ): SetRebalanceWethLimitPriceToleranceEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FULL_REBALANCE_CLEARING_PRICE_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_REBALANCE_WETH_LIMIT_PRICE_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionManager(overrides?: CallOverrides): Promise<BigNumber>;

    crLower(overrides?: CallOverrides): Promise<BigNumber>;

    crUpper(overrides?: CallOverrides): Promise<BigNumber>;

    deltaLower(overrides?: CallOverrides): Promise<BigNumber>;

    deltaUpper(overrides?: CallOverrides): Promise<BigNumber>;

    fullRebalance(
      _orders: AuctionBull.OrderStruct[],
      _crabAmount: BigNumberish,
      _clearingPrice: BigNumberish,
      _wethTargetInEuler: BigNumberish,
      _wethLimitPrice: BigNumberish,
      _ethUsdcPoolFee: BigNumberish,
      _isDepositingInCrab: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fullRebalanceClearingPriceTolerance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentDeltaAndCollatRatio(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leverageRebalance(
      _isSellingUsdc: boolean,
      _usdcAmount: BigNumberish,
      _wethLimitPrice: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebalanceWethLimitPriceTolerance(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionManager(
      _auctionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCrUpperAndLower(
      _crLower: BigNumberish,
      _crUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDeltaUpperAndLower(
      _deltaLower: BigNumberish,
      _deltaUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFullRebalanceClearingPriceTolerance(
      _fullRebalancePriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRebalanceWethLimitPriceTolerance(
      _rebalanceWethLimitPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    useNonce(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FULL_REBALANCE_CLEARING_PRICE_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_REBALANCE_WETH_LIMIT_PRICE_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crLower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crUpper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deltaLower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deltaUpper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fullRebalance(
      _orders: AuctionBull.OrderStruct[],
      _crabAmount: BigNumberish,
      _clearingPrice: BigNumberish,
      _wethTargetInEuler: BigNumberish,
      _wethLimitPrice: BigNumberish,
      _ethUsdcPoolFee: BigNumberish,
      _isDepositingInCrab: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fullRebalanceClearingPriceTolerance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentDeltaAndCollatRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leverageRebalance(
      _isSellingUsdc: boolean,
      _usdcAmount: BigNumberish,
      _wethLimitPrice: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalanceWethLimitPriceTolerance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionManager(
      _auctionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCrUpperAndLower(
      _crLower: BigNumberish,
      _crUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDeltaUpperAndLower(
      _deltaLower: BigNumberish,
      _deltaUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFullRebalanceClearingPriceTolerance(
      _fullRebalancePriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRebalanceWethLimitPriceTolerance(
      _rebalanceWethLimitPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    useNonce(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
