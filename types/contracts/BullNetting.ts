/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ZenBullNetting {
  export type OrderStruct = {
    bidId: BigNumberish;
    trader: string;
    quantity: BigNumberish;
    price: BigNumberish;
    isBuying: boolean;
    expiry: BigNumberish;
    nonce: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type OrderStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ] & {
    bidId: BigNumber;
    trader: string;
    quantity: BigNumber;
    price: BigNumber;
    isBuying: boolean;
    expiry: BigNumber;
    nonce: BigNumber;
    v: number;
    r: string;
    s: string;
  };

  export type DepositAuctionParamsStruct = {
    depositsToProcess: BigNumberish;
    crabAmount: BigNumberish;
    orders: ZenBullNetting.OrderStruct[];
    clearingPrice: BigNumberish;
    flashDepositEthToCrab: BigNumberish;
    flashDepositMinEthFromSqth: BigNumberish;
    flashDepositMinEthFromUsdc: BigNumberish;
    flashDepositWPowerPerpPoolFee: BigNumberish;
    wethUsdcPoolFee: BigNumberish;
  };

  export type DepositAuctionParamsStructOutput = [
    BigNumber,
    BigNumber,
    ZenBullNetting.OrderStructOutput[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    depositsToProcess: BigNumber;
    crabAmount: BigNumber;
    orders: ZenBullNetting.OrderStructOutput[];
    clearingPrice: BigNumber;
    flashDepositEthToCrab: BigNumber;
    flashDepositMinEthFromSqth: BigNumber;
    flashDepositMinEthFromUsdc: BigNumber;
    flashDepositWPowerPerpPoolFee: number;
    wethUsdcPoolFee: number;
  };

  export type WithdrawAuctionParamsStruct = {
    withdrawsToProcess: BigNumberish;
    orders: ZenBullNetting.OrderStruct[];
    clearingPrice: BigNumberish;
    maxWethForUsdc: BigNumberish;
    wethUsdcPoolFee: BigNumberish;
  };

  export type WithdrawAuctionParamsStructOutput = [
    BigNumber,
    ZenBullNetting.OrderStructOutput[],
    BigNumber,
    BigNumber,
    number
  ] & {
    withdrawsToProcess: BigNumber;
    orders: ZenBullNetting.OrderStructOutput[];
    clearingPrice: BigNumber;
    maxWethForUsdc: BigNumber;
    wethUsdcPoolFee: number;
  };
}

export interface BullNettingInterface extends utils.Interface {
  contractName: "BullNetting";
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MAX_OTC_PRICE_TOLERANCE()": FunctionFragment;
    "MIN_AUCTION_TWAP()": FunctionFragment;
    "auctionTwapPeriod()": FunctionFragment;
    "checkOrder((uint256,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "depositAuction((uint256,uint256,(uint256,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32)[],uint256,uint256,uint256,uint256,uint24,uint24))": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "depositsIndex()": FunctionFragment;
    "depositsQueued()": FunctionFragment;
    "dequeueEth(uint256,bool)": FunctionFragment;
    "dequeueZenBull(uint256,bool)": FunctionFragment;
    "ethBalance(address)": FunctionFragment;
    "getDepositReceipt(uint256)": FunctionFragment;
    "getWithdrawReceipt(uint256)": FunctionFragment;
    "isAuctionLive()": FunctionFragment;
    "minEthAmount()": FunctionFragment;
    "minZenBullAmount()": FunctionFragment;
    "netAtPrice(uint256,uint256)": FunctionFragment;
    "nonces(address,uint256)": FunctionFragment;
    "otcPriceTolerance()": FunctionFragment;
    "owner()": FunctionFragment;
    "queueEth()": FunctionFragment;
    "queueZenBull(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAuctionTwapPeriod(uint32)": FunctionFragment;
    "setDepositsIndex(uint256)": FunctionFragment;
    "setMinEthAmount(uint256)": FunctionFragment;
    "setMinZenBullAmount(uint256)": FunctionFragment;
    "setOTCPriceTolerance(uint256)": FunctionFragment;
    "setWithdrawsIndex(uint256)": FunctionFragment;
    "toggleAuctionLive()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "userDepositsIndex(address,uint256)": FunctionFragment;
    "userWithdrawsIndex(address,uint256)": FunctionFragment;
    "withdrawAuction((uint256,(uint256,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32)[],uint256,uint256,uint24))": FunctionFragment;
    "withdraws(uint256)": FunctionFragment;
    "withdrawsIndex()": FunctionFragment;
    "withdrawsQueued()": FunctionFragment;
    "zenBullBalance(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OTC_PRICE_TOLERANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_AUCTION_TWAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionTwapPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkOrder",
    values: [ZenBullNetting.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAuction",
    values: [ZenBullNetting.DepositAuctionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositsIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositsQueued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dequeueEth",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "dequeueZenBull",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "ethBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDepositReceipt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawReceipt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuctionLive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minEthAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minZenBullAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "netAtPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "otcPriceTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "queueEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queueZenBull",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionTwapPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositsIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinEthAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinZenBullAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOTCPriceTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawsIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleAuctionLive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userDepositsIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdrawsIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAuction",
    values: [ZenBullNetting.WithdrawAuctionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraws",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawsIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawsQueued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zenBullBalance",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OTC_PRICE_TOLERANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_AUCTION_TWAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionTwapPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositsQueued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dequeueEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dequeueZenBull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionLive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minEthAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minZenBullAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "netAtPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "otcPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queueEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueZenBull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionTwapPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinEthAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinZenBullAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOTCPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleAuctionLive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDepositsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdrawsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraws", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawsQueued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zenBullBalance",
    data: BytesLike
  ): Result;

  events: {
    "DepositAuction(address,uint256,uint256,uint256)": EventFragment;
    "DequeueEth(address,uint256,uint256)": EventFragment;
    "DequeueZenBull(address,uint256,uint256)": EventFragment;
    "EthDeposited(address,uint256,uint256,uint256,uint256)": EventFragment;
    "NetAtPrice(bool,address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "QueueEth(address,uint256,uint256,uint256)": EventFragment;
    "QueueZenBull(address,uint256,uint256,uint256)": EventFragment;
    "SetAuctionTwapPeriod(uint32,uint32)": EventFragment;
    "SetDepositsIndex(uint256,uint256)": EventFragment;
    "SetMinEthAmount(uint256,uint256)": EventFragment;
    "SetMinZenBullAmount(uint256,uint256)": EventFragment;
    "SetOTCPriceTolerance(uint256,uint256)": EventFragment;
    "SetWithdrawsIndex(uint256,uint256)": EventFragment;
    "ToggledAuctionLive(bool)": EventFragment;
    "WithdrawAuction(address,uint256,uint256,uint256)": EventFragment;
    "ZenBullWithdrawn(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DequeueEth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DequeueZenBull"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetAtPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueueEth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueueZenBull"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAuctionTwapPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDepositsIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinEthAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinZenBullAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOTCPriceTolerance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWithdrawsIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ToggledAuctionLive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZenBullWithdrawn"): EventFragment;
}

export type DepositAuctionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { trader: string; bidId: BigNumber; quantity: BigNumber; price: BigNumber }
>;

export type DepositAuctionEventFilter = TypedEventFilter<DepositAuctionEvent>;

export type DequeueEthEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { depositor: string; amount: BigNumber; depositorsBalance: BigNumber }
>;

export type DequeueEthEventFilter = TypedEventFilter<DequeueEthEvent>;

export type DequeueZenBullEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { withdrawer: string; amount: BigNumber; withdrawersBalance: BigNumber }
>;

export type DequeueZenBullEventFilter = TypedEventFilter<DequeueZenBullEvent>;

export type EthDepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    depositor: string;
    ethAmount: BigNumber;
    zenBullAmount: BigNumber;
    receiptIndex: BigNumber;
    refundedETH: BigNumber;
  }
>;

export type EthDepositedEventFilter = TypedEventFilter<EthDepositedEvent>;

export type NetAtPriceEvent = TypedEvent<
  [boolean, string, BigNumber, BigNumber, BigNumber],
  {
    isDeposit: boolean;
    receiver: string;
    amountQueuedProcessed: BigNumber;
    amountReceived: BigNumber;
    index: BigNumber;
  }
>;

export type NetAtPriceEventFilter = TypedEventFilter<NetAtPriceEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type QueueEthEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    depositor: string;
    amount: BigNumber;
    depositorsBalance: BigNumber;
    receiptIndex: BigNumber;
  }
>;

export type QueueEthEventFilter = TypedEventFilter<QueueEthEvent>;

export type QueueZenBullEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    withdrawer: string;
    amount: BigNumber;
    withdrawersBalance: BigNumber;
    receiptIndex: BigNumber;
  }
>;

export type QueueZenBullEventFilter = TypedEventFilter<QueueZenBullEvent>;

export type SetAuctionTwapPeriodEvent = TypedEvent<
  [number, number],
  { previousTwap: number; newTwap: number }
>;

export type SetAuctionTwapPeriodEventFilter =
  TypedEventFilter<SetAuctionTwapPeriodEvent>;

export type SetDepositsIndexEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldDepositsIndex: BigNumber; newDepositsIndex: BigNumber }
>;

export type SetDepositsIndexEventFilter =
  TypedEventFilter<SetDepositsIndexEvent>;

export type SetMinEthAmountEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldAmount: BigNumber; newAmount: BigNumber }
>;

export type SetMinEthAmountEventFilter = TypedEventFilter<SetMinEthAmountEvent>;

export type SetMinZenBullAmountEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldAmount: BigNumber; newAmount: BigNumber }
>;

export type SetMinZenBullAmountEventFilter =
  TypedEventFilter<SetMinZenBullAmountEvent>;

export type SetOTCPriceToleranceEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousTolerance: BigNumber; newOtcPriceTolerance: BigNumber }
>;

export type SetOTCPriceToleranceEventFilter =
  TypedEventFilter<SetOTCPriceToleranceEvent>;

export type SetWithdrawsIndexEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldWithdrawsIndex: BigNumber; newWithdrawsIndex: BigNumber }
>;

export type SetWithdrawsIndexEventFilter =
  TypedEventFilter<SetWithdrawsIndexEvent>;

export type ToggledAuctionLiveEvent = TypedEvent<
  [boolean],
  { isAuctionLive: boolean }
>;

export type ToggledAuctionLiveEventFilter =
  TypedEventFilter<ToggledAuctionLiveEvent>;

export type WithdrawAuctionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { trader: string; bidId: BigNumber; quantity: BigNumber; price: BigNumber }
>;

export type WithdrawAuctionEventFilter = TypedEventFilter<WithdrawAuctionEvent>;

export type ZenBullWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    withdrawer: string;
    zenBullAmount: BigNumber;
    ethAmount: BigNumber;
    receiptIndex: BigNumber;
  }
>;

export type ZenBullWithdrawnEventFilter =
  TypedEventFilter<ZenBullWithdrawnEvent>;

export interface BullNetting extends BaseContract {
  contractName: "BullNetting";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BullNettingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_AUCTION_TWAP(overrides?: CallOverrides): Promise<[number]>;

    auctionTwapPeriod(overrides?: CallOverrides): Promise<[number]>;

    checkOrder(
      _order: ZenBullNetting.OrderStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    depositAuction(
      _params: ZenBullNetting.DepositAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sender: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    depositsIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositsQueued(overrides?: CallOverrides): Promise<[BigNumber]>;

    dequeueEth(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dequeueZenBull(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getDepositReceipt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    getWithdrawReceipt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    isAuctionLive(overrides?: CallOverrides): Promise<[boolean]>;

    minEthAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minZenBullAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    netAtPrice(
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queueEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queueZenBull(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionTwapPeriod(
      _auctionTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositsIndex(
      _newDepositsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinEthAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinZenBullAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawsIndex(
      _newWithdrawsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleAuctionLive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userDepositsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userWithdrawsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawAuction(
      _params: ZenBullNetting.WithdrawAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sender: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    withdrawsIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawsQueued(overrides?: CallOverrides): Promise<[BigNumber]>;

    zenBullBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_AUCTION_TWAP(overrides?: CallOverrides): Promise<number>;

  auctionTwapPeriod(overrides?: CallOverrides): Promise<number>;

  checkOrder(
    _order: ZenBullNetting.OrderStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  depositAuction(
    _params: ZenBullNetting.DepositAuctionParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      sender: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  depositsIndex(overrides?: CallOverrides): Promise<BigNumber>;

  depositsQueued(overrides?: CallOverrides): Promise<BigNumber>;

  dequeueEth(
    _amount: BigNumberish,
    _force: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dequeueZenBull(
    _amount: BigNumberish,
    _force: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getDepositReceipt(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber]>;

  getWithdrawReceipt(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber]>;

  isAuctionLive(overrides?: CallOverrides): Promise<boolean>;

  minEthAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minZenBullAmount(overrides?: CallOverrides): Promise<BigNumber>;

  netAtPrice(
    _price: BigNumberish,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  otcPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  queueEth(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queueZenBull(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionTwapPeriod(
    _auctionTwapPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositsIndex(
    _newDepositsIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinEthAmount(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinZenBullAmount(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOTCPriceTolerance(
    _otcPriceTolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawsIndex(
    _newWithdrawsIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleAuctionLive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userDepositsIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userWithdrawsIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawAuction(
    _params: ZenBullNetting.WithdrawAuctionParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraws(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      sender: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  withdrawsIndex(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawsQueued(overrides?: CallOverrides): Promise<BigNumber>;

  zenBullBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_AUCTION_TWAP(overrides?: CallOverrides): Promise<number>;

    auctionTwapPeriod(overrides?: CallOverrides): Promise<number>;

    checkOrder(
      _order: ZenBullNetting.OrderStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositAuction(
      _params: ZenBullNetting.DepositAuctionParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sender: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    depositsIndex(overrides?: CallOverrides): Promise<BigNumber>;

    depositsQueued(overrides?: CallOverrides): Promise<BigNumber>;

    dequeueEth(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    dequeueZenBull(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ethBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositReceipt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    getWithdrawReceipt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber]>;

    isAuctionLive(overrides?: CallOverrides): Promise<boolean>;

    minEthAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minZenBullAmount(overrides?: CallOverrides): Promise<BigNumber>;

    netAtPrice(
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    queueEth(overrides?: CallOverrides): Promise<void>;

    queueZenBull(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAuctionTwapPeriod(
      _auctionTwapPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositsIndex(
      _newDepositsIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinEthAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinZenBullAmount(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawsIndex(
      _newWithdrawsIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleAuctionLive(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    userDepositsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWithdrawsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAuction(
      _params: ZenBullNetting.WithdrawAuctionParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sender: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    withdrawsIndex(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawsQueued(overrides?: CallOverrides): Promise<BigNumber>;

    zenBullBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DepositAuction(address,uint256,uint256,uint256)"(
      trader?: string | null,
      bidId?: BigNumberish | null,
      quantity?: null,
      price?: null
    ): DepositAuctionEventFilter;
    DepositAuction(
      trader?: string | null,
      bidId?: BigNumberish | null,
      quantity?: null,
      price?: null
    ): DepositAuctionEventFilter;

    "DequeueEth(address,uint256,uint256)"(
      depositor?: string | null,
      amount?: null,
      depositorsBalance?: null
    ): DequeueEthEventFilter;
    DequeueEth(
      depositor?: string | null,
      amount?: null,
      depositorsBalance?: null
    ): DequeueEthEventFilter;

    "DequeueZenBull(address,uint256,uint256)"(
      withdrawer?: string | null,
      amount?: null,
      withdrawersBalance?: null
    ): DequeueZenBullEventFilter;
    DequeueZenBull(
      withdrawer?: string | null,
      amount?: null,
      withdrawersBalance?: null
    ): DequeueZenBullEventFilter;

    "EthDeposited(address,uint256,uint256,uint256,uint256)"(
      depositor?: string | null,
      ethAmount?: null,
      zenBullAmount?: null,
      receiptIndex?: BigNumberish | null,
      refundedETH?: null
    ): EthDepositedEventFilter;
    EthDeposited(
      depositor?: string | null,
      ethAmount?: null,
      zenBullAmount?: null,
      receiptIndex?: BigNumberish | null,
      refundedETH?: null
    ): EthDepositedEventFilter;

    "NetAtPrice(bool,address,uint256,uint256,uint256)"(
      isDeposit?: boolean | null,
      receiver?: string | null,
      amountQueuedProcessed?: null,
      amountReceived?: null,
      index?: BigNumberish | null
    ): NetAtPriceEventFilter;
    NetAtPrice(
      isDeposit?: boolean | null,
      receiver?: string | null,
      amountQueuedProcessed?: null,
      amountReceived?: null,
      index?: BigNumberish | null
    ): NetAtPriceEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "QueueEth(address,uint256,uint256,uint256)"(
      depositor?: string | null,
      amount?: null,
      depositorsBalance?: null,
      receiptIndex?: BigNumberish | null
    ): QueueEthEventFilter;
    QueueEth(
      depositor?: string | null,
      amount?: null,
      depositorsBalance?: null,
      receiptIndex?: BigNumberish | null
    ): QueueEthEventFilter;

    "QueueZenBull(address,uint256,uint256,uint256)"(
      withdrawer?: string | null,
      amount?: null,
      withdrawersBalance?: null,
      receiptIndex?: BigNumberish | null
    ): QueueZenBullEventFilter;
    QueueZenBull(
      withdrawer?: string | null,
      amount?: null,
      withdrawersBalance?: null,
      receiptIndex?: BigNumberish | null
    ): QueueZenBullEventFilter;

    "SetAuctionTwapPeriod(uint32,uint32)"(
      previousTwap?: null,
      newTwap?: null
    ): SetAuctionTwapPeriodEventFilter;
    SetAuctionTwapPeriod(
      previousTwap?: null,
      newTwap?: null
    ): SetAuctionTwapPeriodEventFilter;

    "SetDepositsIndex(uint256,uint256)"(
      oldDepositsIndex?: null,
      newDepositsIndex?: null
    ): SetDepositsIndexEventFilter;
    SetDepositsIndex(
      oldDepositsIndex?: null,
      newDepositsIndex?: null
    ): SetDepositsIndexEventFilter;

    "SetMinEthAmount(uint256,uint256)"(
      oldAmount?: null,
      newAmount?: null
    ): SetMinEthAmountEventFilter;
    SetMinEthAmount(
      oldAmount?: null,
      newAmount?: null
    ): SetMinEthAmountEventFilter;

    "SetMinZenBullAmount(uint256,uint256)"(
      oldAmount?: null,
      newAmount?: null
    ): SetMinZenBullAmountEventFilter;
    SetMinZenBullAmount(
      oldAmount?: null,
      newAmount?: null
    ): SetMinZenBullAmountEventFilter;

    "SetOTCPriceTolerance(uint256,uint256)"(
      previousTolerance?: null,
      newOtcPriceTolerance?: null
    ): SetOTCPriceToleranceEventFilter;
    SetOTCPriceTolerance(
      previousTolerance?: null,
      newOtcPriceTolerance?: null
    ): SetOTCPriceToleranceEventFilter;

    "SetWithdrawsIndex(uint256,uint256)"(
      oldWithdrawsIndex?: null,
      newWithdrawsIndex?: null
    ): SetWithdrawsIndexEventFilter;
    SetWithdrawsIndex(
      oldWithdrawsIndex?: null,
      newWithdrawsIndex?: null
    ): SetWithdrawsIndexEventFilter;

    "ToggledAuctionLive(bool)"(
      isAuctionLive?: null
    ): ToggledAuctionLiveEventFilter;
    ToggledAuctionLive(isAuctionLive?: null): ToggledAuctionLiveEventFilter;

    "WithdrawAuction(address,uint256,uint256,uint256)"(
      trader?: string | null,
      bidId?: BigNumberish | null,
      quantity?: null,
      price?: null
    ): WithdrawAuctionEventFilter;
    WithdrawAuction(
      trader?: string | null,
      bidId?: BigNumberish | null,
      quantity?: null,
      price?: null
    ): WithdrawAuctionEventFilter;

    "ZenBullWithdrawn(address,uint256,uint256,uint256)"(
      withdrawer?: string | null,
      zenBullAmount?: null,
      ethAmount?: null,
      receiptIndex?: BigNumberish | null
    ): ZenBullWithdrawnEventFilter;
    ZenBullWithdrawn(
      withdrawer?: string | null,
      zenBullAmount?: null,
      ethAmount?: null,
      receiptIndex?: BigNumberish | null
    ): ZenBullWithdrawnEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_AUCTION_TWAP(overrides?: CallOverrides): Promise<BigNumber>;

    auctionTwapPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    checkOrder(
      _order: ZenBullNetting.OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositAuction(
      _params: ZenBullNetting.DepositAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    depositsIndex(overrides?: CallOverrides): Promise<BigNumber>;

    depositsQueued(overrides?: CallOverrides): Promise<BigNumber>;

    dequeueEth(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dequeueZenBull(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getDepositReceipt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawReceipt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuctionLive(overrides?: CallOverrides): Promise<BigNumber>;

    minEthAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minZenBullAmount(overrides?: CallOverrides): Promise<BigNumber>;

    netAtPrice(
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queueEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queueZenBull(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionTwapPeriod(
      _auctionTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositsIndex(
      _newDepositsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinEthAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinZenBullAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawsIndex(
      _newWithdrawsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleAuctionLive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userDepositsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWithdrawsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAuction(
      _params: ZenBullNetting.WithdrawAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawsIndex(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawsQueued(overrides?: CallOverrides): Promise<BigNumber>;

    zenBullBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_OTC_PRICE_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_AUCTION_TWAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionTwapPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkOrder(
      _order: ZenBullNetting.OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositAuction(
      _params: ZenBullNetting.DepositAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositsIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositsQueued(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dequeueEth(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dequeueZenBull(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositReceipt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawReceipt(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuctionLive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minEthAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minZenBullAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    netAtPrice(
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueEth(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queueZenBull(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionTwapPeriod(
      _auctionTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositsIndex(
      _newDepositsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinEthAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinZenBullAmount(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawsIndex(
      _newWithdrawsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleAuctionLive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userDepositsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userWithdrawsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAuction(
      _params: ZenBullNetting.WithdrawAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawsIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawsQueued(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zenBullBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
