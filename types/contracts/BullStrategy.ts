/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BullStrategyInterface extends utils.Interface {
  contractName: "BullStrategy";
  functions: {
    "TARGET_CR()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "auction()": FunctionFragment;
    "auctionRepayAndWithdrawFromLeverage(uint256,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calcLeverageEthUsdc(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcUsdcToRepay(uint256)": FunctionFragment;
    "calcWethToWithdraw(uint256)": FunctionFragment;
    "crab()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositAndBorrowFromLeverage(uint256,uint256)": FunctionFragment;
    "depositEthIntoCrab(uint256)": FunctionFragment;
    "farm(address,address)": FunctionFragment;
    "getCrabBalance()": FunctionFragment;
    "getCrabVaultDetails()": FunctionFragment;
    "hasRedeemedInShutdown()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "powerTokenController()": FunctionFragment;
    "redeemCrabAndWithdrawWEth(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAuction(address)": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setShutdownContract(address)": FunctionFragment;
    "shutdownContract()": FunctionFragment;
    "shutdownRepayAndWithdraw(uint256,uint256)": FunctionFragment;
    "strategyCap()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawShutdown(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "TARGET_CR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "auction", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctionRepayAndWithdrawFromLeverage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calcLeverageEthUsdc",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcUsdcToRepay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcWethToWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "crab", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndBorrowFromLeverage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEthIntoCrab",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farm",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCrabBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCrabVaultDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRedeemedInShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "powerTokenController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemCrabAndWithdrawWEth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAuction", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShutdownContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shutdownRepayAndWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyCap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawShutdown",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "TARGET_CR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionRepayAndWithdrawFromLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcLeverageEthUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcUsdcToRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcWethToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndBorrowFromLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEthIntoCrab",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "farm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCrabBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCrabVaultDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRedeemedInShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemCrabAndWithdrawWEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setShutdownContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shutdownContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shutdownRepayAndWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawShutdown",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuctionRepayAndWithdrawFromLeverage(address,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256,uint256)": EventFragment;
    "DepositEthIntoCrab(uint256)": EventFragment;
    "Farm(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RedeemCrabAndWithdrawEth(uint256,uint256,uint256)": EventFragment;
    "SetAuction(address,address)": EventFragment;
    "SetCap(uint256,uint256)": EventFragment;
    "SetShutdownContract(address,address)": EventFragment;
    "ShutdownRepayAndWithdraw(uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawShutdown(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuctionRepayAndWithdrawFromLeverage"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositEthIntoCrab"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Farm"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemCrabAndWithdrawEth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetShutdownContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownRepayAndWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawShutdown"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type AuctionRepayAndWithdrawFromLeverageEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { from: string; usdcToRepay: BigNumber; wethToWithdraw: BigNumber }
>;

export type AuctionRepayAndWithdrawFromLeverageEventFilter =
  TypedEventFilter<AuctionRepayAndWithdrawFromLeverageEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    from: string;
    crabAmount: BigNumber;
    wethLent: BigNumber;
    usdcBorrowed: BigNumber;
  }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type DepositEthIntoCrabEvent = TypedEvent<
  [BigNumber],
  { ethToDeposit: BigNumber }
>;

export type DepositEthIntoCrabEventFilter =
  TypedEventFilter<DepositEthIntoCrabEvent>;

export type FarmEvent = TypedEvent<
  [string, string],
  { asset: string; receiver: string }
>;

export type FarmEventFilter = TypedEventFilter<FarmEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RedeemCrabAndWithdrawEthEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    crabToRedeem: BigNumber;
    wPowerPerpRedeemed: BigNumber;
    wethBalanceReturned: BigNumber;
  }
>;

export type RedeemCrabAndWithdrawEthEventFilter =
  TypedEventFilter<RedeemCrabAndWithdrawEthEvent>;

export type SetAuctionEvent = TypedEvent<
  [string, string],
  { oldAuction: string; newAuction: string }
>;

export type SetAuctionEventFilter = TypedEventFilter<SetAuctionEvent>;

export type SetCapEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldCap: BigNumber; newCap: BigNumber }
>;

export type SetCapEventFilter = TypedEventFilter<SetCapEvent>;

export type SetShutdownContractEvent = TypedEvent<
  [string, string],
  { newShutdownContract: string; oldShutdownContract: string }
>;

export type SetShutdownContractEventFilter =
  TypedEventFilter<SetShutdownContractEvent>;

export type ShutdownRepayAndWithdrawEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    wethToUniswap: BigNumber;
    shareToUnwind: BigNumber;
    crabToRedeem: BigNumber;
  }
>;

export type ShutdownRepayAndWithdrawEventFilter =
  TypedEventFilter<ShutdownRepayAndWithdrawEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    to: string;
    bullAmount: BigNumber;
    crabToRedeem: BigNumber;
    wPowerPerpToRedeem: BigNumber;
    usdcToRepay: BigNumber;
    wethToWithdraw: BigNumber;
  }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export type WithdrawShutdownEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { withdrawer: string; bullAmount: BigNumber; ethToReceive: BigNumber }
>;

export type WithdrawShutdownEventFilter =
  TypedEventFilter<WithdrawShutdownEvent>;

export interface BullStrategy extends BaseContract {
  contractName: "BullStrategy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BullStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TARGET_CR(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auction(overrides?: CallOverrides): Promise<[string]>;

    auctionRepayAndWithdrawFromLeverage(
      _usdcToRepay: BigNumberish,
      _wethToWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    calcLeverageEthUsdc(
      _crabAmount: BigNumberish,
      _bullShare: BigNumberish,
      _ethInCrab: BigNumberish,
      _wPowerPerpInCrab: BigNumberish,
      _totalCrabSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calcUsdcToRepay(
      _bullShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcWethToWithdraw(
      _bullShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    crab(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _crabAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndBorrowFromLeverage(
      _wethToDeposit: BigNumberish,
      _usdcToBorrow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositEthIntoCrab(
      _ethToDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farm(
      _asset: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCrabBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCrabVaultDetails(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    hasRedeemedInShutdown(overrides?: CallOverrides): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    powerTokenController(overrides?: CallOverrides): Promise<[string]>;

    redeemCrabAndWithdrawWEth(
      _crabToRedeem: BigNumberish,
      _wPowerPerpToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuction(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCap(
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setShutdownContract(
      _shutdownContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shutdownContract(overrides?: CallOverrides): Promise<[string]>;

    shutdownRepayAndWithdraw(
      wethToUniswap: BigNumberish,
      shareToUnwind: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _bullAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawShutdown(
      _bullAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TARGET_CR(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auction(overrides?: CallOverrides): Promise<string>;

  auctionRepayAndWithdrawFromLeverage(
    _usdcToRepay: BigNumberish,
    _wethToWithdraw: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  calcLeverageEthUsdc(
    _crabAmount: BigNumberish,
    _bullShare: BigNumberish,
    _ethInCrab: BigNumberish,
    _wPowerPerpInCrab: BigNumberish,
    _totalCrabSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  calcUsdcToRepay(
    _bullShare: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcWethToWithdraw(
    _bullShare: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  crab(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _crabAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndBorrowFromLeverage(
    _wethToDeposit: BigNumberish,
    _usdcToBorrow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositEthIntoCrab(
    _ethToDeposit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farm(
    _asset: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCrabBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getCrabVaultDetails(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  hasRedeemedInShutdown(overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  powerTokenController(overrides?: CallOverrides): Promise<string>;

  redeemCrabAndWithdrawWEth(
    _crabToRedeem: BigNumberish,
    _wPowerPerpToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuction(
    _auction: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCap(
    _cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setShutdownContract(
    _shutdownContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shutdownContract(overrides?: CallOverrides): Promise<string>;

  shutdownRepayAndWithdraw(
    wethToUniswap: BigNumberish,
    shareToUnwind: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyCap(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _bullAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawShutdown(
    _bullAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TARGET_CR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auction(overrides?: CallOverrides): Promise<string>;

    auctionRepayAndWithdrawFromLeverage(
      _usdcToRepay: BigNumberish,
      _wethToWithdraw: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    calcLeverageEthUsdc(
      _crabAmount: BigNumberish,
      _bullShare: BigNumberish,
      _ethInCrab: BigNumberish,
      _wPowerPerpInCrab: BigNumberish,
      _totalCrabSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    calcUsdcToRepay(
      _bullShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcWethToWithdraw(
      _bullShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crab(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndBorrowFromLeverage(
      _wethToDeposit: BigNumberish,
      _usdcToBorrow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositEthIntoCrab(
      _ethToDeposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    farm(
      _asset: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCrabBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCrabVaultDetails(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    hasRedeemedInShutdown(overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    powerTokenController(overrides?: CallOverrides): Promise<string>;

    redeemCrabAndWithdrawWEth(
      _crabToRedeem: BigNumberish,
      _wPowerPerpToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAuction(_auction: string, overrides?: CallOverrides): Promise<void>;

    setCap(_cap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setShutdownContract(
      _shutdownContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shutdownContract(overrides?: CallOverrides): Promise<string>;

    shutdownRepayAndWithdraw(
      wethToUniswap: BigNumberish,
      shareToUnwind: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyCap(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _bullAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawShutdown(
      _bullAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "AuctionRepayAndWithdrawFromLeverage(address,uint256,uint256)"(
      from?: null,
      usdcToRepay?: null,
      wethToWithdraw?: null
    ): AuctionRepayAndWithdrawFromLeverageEventFilter;
    AuctionRepayAndWithdrawFromLeverage(
      from?: null,
      usdcToRepay?: null,
      wethToWithdraw?: null
    ): AuctionRepayAndWithdrawFromLeverageEventFilter;

    "Deposit(address,uint256,uint256,uint256)"(
      from?: string | null,
      crabAmount?: null,
      wethLent?: null,
      usdcBorrowed?: null
    ): DepositEventFilter;
    Deposit(
      from?: string | null,
      crabAmount?: null,
      wethLent?: null,
      usdcBorrowed?: null
    ): DepositEventFilter;

    "DepositEthIntoCrab(uint256)"(
      ethToDeposit?: null
    ): DepositEthIntoCrabEventFilter;
    DepositEthIntoCrab(ethToDeposit?: null): DepositEthIntoCrabEventFilter;

    "Farm(address,address)"(
      asset?: string | null,
      receiver?: string | null
    ): FarmEventFilter;
    Farm(asset?: string | null, receiver?: string | null): FarmEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RedeemCrabAndWithdrawEth(uint256,uint256,uint256)"(
      crabToRedeem?: BigNumberish | null,
      wPowerPerpRedeemed?: null,
      wethBalanceReturned?: null
    ): RedeemCrabAndWithdrawEthEventFilter;
    RedeemCrabAndWithdrawEth(
      crabToRedeem?: BigNumberish | null,
      wPowerPerpRedeemed?: null,
      wethBalanceReturned?: null
    ): RedeemCrabAndWithdrawEthEventFilter;

    "SetAuction(address,address)"(
      oldAuction?: null,
      newAuction?: null
    ): SetAuctionEventFilter;
    SetAuction(oldAuction?: null, newAuction?: null): SetAuctionEventFilter;

    "SetCap(uint256,uint256)"(oldCap?: null, newCap?: null): SetCapEventFilter;
    SetCap(oldCap?: null, newCap?: null): SetCapEventFilter;

    "SetShutdownContract(address,address)"(
      newShutdownContract?: null,
      oldShutdownContract?: null
    ): SetShutdownContractEventFilter;
    SetShutdownContract(
      newShutdownContract?: null,
      oldShutdownContract?: null
    ): SetShutdownContractEventFilter;

    "ShutdownRepayAndWithdraw(uint256,uint256,uint256)"(
      wethToUniswap?: null,
      shareToUnwind?: null,
      crabToRedeem?: null
    ): ShutdownRepayAndWithdrawEventFilter;
    ShutdownRepayAndWithdraw(
      wethToUniswap?: null,
      shareToUnwind?: null,
      crabToRedeem?: null
    ): ShutdownRepayAndWithdrawEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdraw(address,uint256,uint256,uint256,uint256,uint256)"(
      to?: string | null,
      bullAmount?: null,
      crabToRedeem?: null,
      wPowerPerpToRedeem?: null,
      usdcToRepay?: null,
      wethToWithdraw?: null
    ): WithdrawEventFilter;
    Withdraw(
      to?: string | null,
      bullAmount?: null,
      crabToRedeem?: null,
      wPowerPerpToRedeem?: null,
      usdcToRepay?: null,
      wethToWithdraw?: null
    ): WithdrawEventFilter;

    "WithdrawShutdown(address,uint256,uint256)"(
      withdrawer?: string | null,
      bullAmount?: null,
      ethToReceive?: null
    ): WithdrawShutdownEventFilter;
    WithdrawShutdown(
      withdrawer?: string | null,
      bullAmount?: null,
      ethToReceive?: null
    ): WithdrawShutdownEventFilter;
  };

  estimateGas: {
    TARGET_CR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auction(overrides?: CallOverrides): Promise<BigNumber>;

    auctionRepayAndWithdrawFromLeverage(
      _usdcToRepay: BigNumberish,
      _wethToWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    calcLeverageEthUsdc(
      _crabAmount: BigNumberish,
      _bullShare: BigNumberish,
      _ethInCrab: BigNumberish,
      _wPowerPerpInCrab: BigNumberish,
      _totalCrabSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUsdcToRepay(
      _bullShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcWethToWithdraw(
      _bullShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crab(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _crabAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndBorrowFromLeverage(
      _wethToDeposit: BigNumberish,
      _usdcToBorrow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositEthIntoCrab(
      _ethToDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farm(
      _asset: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCrabBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCrabVaultDetails(overrides?: CallOverrides): Promise<BigNumber>;

    hasRedeemedInShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    powerTokenController(overrides?: CallOverrides): Promise<BigNumber>;

    redeemCrabAndWithdrawWEth(
      _crabToRedeem: BigNumberish,
      _wPowerPerpToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuction(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCap(
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setShutdownContract(
      _shutdownContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shutdownContract(overrides?: CallOverrides): Promise<BigNumber>;

    shutdownRepayAndWithdraw(
      wethToUniswap: BigNumberish,
      shareToUnwind: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyCap(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _bullAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawShutdown(
      _bullAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TARGET_CR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionRepayAndWithdrawFromLeverage(
      _usdcToRepay: BigNumberish,
      _wethToWithdraw: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcLeverageEthUsdc(
      _crabAmount: BigNumberish,
      _bullShare: BigNumberish,
      _ethInCrab: BigNumberish,
      _wPowerPerpInCrab: BigNumberish,
      _totalCrabSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcUsdcToRepay(
      _bullShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcWethToWithdraw(
      _bullShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _crabAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndBorrowFromLeverage(
      _wethToDeposit: BigNumberish,
      _usdcToBorrow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositEthIntoCrab(
      _ethToDeposit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farm(
      _asset: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCrabBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCrabVaultDetails(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRedeemedInShutdown(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerTokenController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemCrabAndWithdrawWEth(
      _crabToRedeem: BigNumberish,
      _wPowerPerpToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuction(
      _auction: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCap(
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setShutdownContract(
      _shutdownContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shutdownContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shutdownRepayAndWithdraw(
      wethToUniswap: BigNumberish,
      shareToUnwind: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _bullAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawShutdown(
      _bullAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
