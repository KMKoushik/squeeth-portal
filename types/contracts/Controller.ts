/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ControllerInterface extends utils.Interface {
  contractName: "Controller";
  functions: {
    "FUNDING_PERIOD()": FunctionFragment;
    "TWAP_PERIOD()": FunctionFragment;
    "applyFunding()": FunctionFragment;
    "burnPowerPerpAmount(uint256,uint256,uint256)": FunctionFragment;
    "burnWPowerPerpAmount(uint256,uint256,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositUniPositionToken(uint256,uint256)": FunctionFragment;
    "donate()": FunctionFragment;
    "ethQuoteCurrencyPool()": FunctionFragment;
    "feeRate()": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "getDenormalizedMark(uint32)": FunctionFragment;
    "getDenormalizedMarkForFunding(uint32)": FunctionFragment;
    "getExpectedNormalizationFactor()": FunctionFragment;
    "getIndex(uint32)": FunctionFragment;
    "getUnscaledIndex(uint32)": FunctionFragment;
    "indexForSettlement()": FunctionFragment;
    "isShutDown()": FunctionFragment;
    "isSystemPaused()": FunctionFragment;
    "isVaultSafe(uint256)": FunctionFragment;
    "lastFundingUpdateTimestamp()": FunctionFragment;
    "lastPauseTime()": FunctionFragment;
    "liquidate(uint256,uint256)": FunctionFragment;
    "mintPowerPerpAmount(uint256,uint256,uint256)": FunctionFragment;
    "mintWPowerPerpAmount(uint256,uint256,uint256)": FunctionFragment;
    "normalizationFactor()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "pausesLeft()": FunctionFragment;
    "quoteCurrency()": FunctionFragment;
    "redeemLong(uint256)": FunctionFragment;
    "redeemShort(uint256)": FunctionFragment;
    "reduceDebt(uint256)": FunctionFragment;
    "reduceDebtShutdown(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeRate(uint256)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "shortPowerPerp()": FunctionFragment;
    "shutDown()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unPauseAnyone()": FunctionFragment;
    "unPauseOwner()": FunctionFragment;
    "updateOperator(uint256,address)": FunctionFragment;
    "vaults(uint256)": FunctionFragment;
    "wPowerPerp()": FunctionFragment;
    "wPowerPerpPool()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawUniPositionToken(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FUNDING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TWAP_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnPowerPerpAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnWPowerPerpAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUniPositionToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "donate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ethQuoteCurrencyPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDenormalizedMark",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDenormalizedMarkForFunding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedNormalizationFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnscaledIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexForSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isShutDown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSystemPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultSafe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFundingUpdateTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPauseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPowerPerpAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWPowerPerpAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "normalizationFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausesLeft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLong",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemShort",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reduceDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reduceDebtShutdown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shortPowerPerp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "shutDown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unPauseAnyone",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unPauseOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperator",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wPowerPerp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wPowerPerpPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUniPositionToken",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FUNDING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TWAP_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnPowerPerpAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnWPowerPerpAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositUniPositionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethQuoteCurrencyPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDenormalizedMark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDenormalizedMarkForFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedNormalizationFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnscaledIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexForSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isShutDown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSystemPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFundingUpdateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPauseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintPowerPerpAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWPowerPerpAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "normalizationFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausesLeft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemLong", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reduceDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reduceDebtShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortPowerPerp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutDown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unPauseAnyone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unPauseOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wPowerPerp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wPowerPerpPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUniPositionToken",
    data: BytesLike
  ): Result;

  events: {
    "BurnShort(address,uint256,uint256)": EventFragment;
    "DepositCollateral(address,uint256,uint256)": EventFragment;
    "DepositUniPositionToken(address,uint256,uint256)": EventFragment;
    "FeeRateUpdated(uint256,uint256)": EventFragment;
    "FeeRecipientUpdated(address,address)": EventFragment;
    "Liquidate(address,uint256,uint256,uint256)": EventFragment;
    "MintShort(address,uint256,uint256)": EventFragment;
    "NormalizationFactorUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "OpenVault(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(uint256)": EventFragment;
    "RedeemLong(address,uint256,uint256)": EventFragment;
    "RedeemShort(address,uint256,uint256)": EventFragment;
    "ReduceDebt(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Shutdown(uint256)": EventFragment;
    "UnPaused(address)": EventFragment;
    "UpdateOperator(address,uint256,address)": EventFragment;
    "WithdrawCollateral(address,uint256,uint256)": EventFragment;
    "WithdrawUniPositionToken(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurnShort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositUniPositionToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRecipientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintShort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NormalizationFactorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemLong"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemShort"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReduceDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Shutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawUniPositionToken"): EventFragment;
}

export type BurnShortEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; amount: BigNumber; vaultId: BigNumber }
>;

export type BurnShortEventFilter = TypedEventFilter<BurnShortEvent>;

export type DepositCollateralEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; vaultId: BigNumber; amount: BigNumber }
>;

export type DepositCollateralEventFilter =
  TypedEventFilter<DepositCollateralEvent>;

export type DepositUniPositionTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; vaultId: BigNumber; tokenId: BigNumber }
>;

export type DepositUniPositionTokenEventFilter =
  TypedEventFilter<DepositUniPositionTokenEvent>;

export type FeeRateUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldFee: BigNumber; newFee: BigNumber }
>;

export type FeeRateUpdatedEventFilter = TypedEventFilter<FeeRateUpdatedEvent>;

export type FeeRecipientUpdatedEvent = TypedEvent<
  [string, string],
  { oldFeeRecipient: string; newFeeRecipient: string }
>;

export type FeeRecipientUpdatedEventFilter =
  TypedEventFilter<FeeRecipientUpdatedEvent>;

export type LiquidateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    liquidator: string;
    vaultId: BigNumber;
    debtAmount: BigNumber;
    collateralPaid: BigNumber;
  }
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export type MintShortEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; amount: BigNumber; vaultId: BigNumber }
>;

export type MintShortEventFilter = TypedEventFilter<MintShortEvent>;

export type NormalizationFactorUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    oldNormFactor: BigNumber;
    newNormFactor: BigNumber;
    lastModificationTimestamp: BigNumber;
    timestamp: BigNumber;
  }
>;

export type NormalizationFactorUpdatedEventFilter =
  TypedEventFilter<NormalizationFactorUpdatedEvent>;

export type OpenVaultEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; vaultId: BigNumber }
>;

export type OpenVaultEventFilter = TypedEventFilter<OpenVaultEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[BigNumber], { pausesLeft: BigNumber }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RedeemLongEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; wPowerPerpAmount: BigNumber; payoutAmount: BigNumber }
>;

export type RedeemLongEventFilter = TypedEventFilter<RedeemLongEvent>;

export type RedeemShortEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; vauldId: BigNumber; collateralAmount: BigNumber }
>;

export type RedeemShortEventFilter = TypedEventFilter<RedeemShortEvent>;

export type ReduceDebtEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    sender: string;
    vaultId: BigNumber;
    ethRedeemed: BigNumber;
    wPowerPerpRedeemed: BigNumber;
    wPowerPerpBurned: BigNumber;
    wPowerPerpExcess: BigNumber;
    bounty: BigNumber;
  }
>;

export type ReduceDebtEventFilter = TypedEventFilter<ReduceDebtEvent>;

export type ShutdownEvent = TypedEvent<
  [BigNumber],
  { indexForSettlement: BigNumber }
>;

export type ShutdownEventFilter = TypedEventFilter<ShutdownEvent>;

export type UnPausedEvent = TypedEvent<[string], { unpauser: string }>;

export type UnPausedEventFilter = TypedEventFilter<UnPausedEvent>;

export type UpdateOperatorEvent = TypedEvent<
  [string, BigNumber, string],
  { sender: string; vaultId: BigNumber; operator: string }
>;

export type UpdateOperatorEventFilter = TypedEventFilter<UpdateOperatorEvent>;

export type WithdrawCollateralEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; vaultId: BigNumber; amount: BigNumber }
>;

export type WithdrawCollateralEventFilter =
  TypedEventFilter<WithdrawCollateralEvent>;

export type WithdrawUniPositionTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; vaultId: BigNumber; tokenId: BigNumber }
>;

export type WithdrawUniPositionTokenEventFilter =
  TypedEventFilter<WithdrawUniPositionTokenEvent>;

export interface Controller extends BaseContract {
  contractName: "Controller";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FUNDING_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    TWAP_PERIOD(overrides?: CallOverrides): Promise<[number]>;

    applyFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnPowerPerpAmount(
      _vaultId: BigNumberish,
      _powerPerpAmount: BigNumberish,
      _withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnWPowerPerpAmount(
      _vaultId: BigNumberish,
      _wPowerPerpAmount: BigNumberish,
      _withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositUniPositionToken(
      _vaultId: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    donate(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethQuoteCurrencyPool(overrides?: CallOverrides): Promise<[string]>;

    feeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    getDenormalizedMark(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDenormalizedMarkForFunding(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExpectedNormalizationFactor(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIndex(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnscaledIndex(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    indexForSettlement(overrides?: CallOverrides): Promise<[BigNumber]>;

    isShutDown(overrides?: CallOverrides): Promise<[boolean]>;

    isSystemPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isVaultSafe(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastFundingUpdateTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastPauseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidate(
      _vaultId: BigNumberish,
      _maxDebtAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPowerPerpAmount(
      _vaultId: BigNumberish,
      _powerPerpAmount: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWPowerPerpAmount(
      _vaultId: BigNumberish,
      _wPowerPerpAmount: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    normalizationFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pausesLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    quoteCurrency(overrides?: CallOverrides): Promise<[string]>;

    redeemLong(
      _wPerpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemShort(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reduceDebt(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reduceDebtShutdown(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRate(
      _newFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortPowerPerp(overrides?: CallOverrides): Promise<[string]>;

    shutDown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unPauseAnyone(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unPauseOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOperator(
      _vaultId: BigNumberish,
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber] & {
        operator: string;
        NftCollateralId: number;
        collateralAmount: BigNumber;
        shortAmount: BigNumber;
      }
    >;

    wPowerPerp(overrides?: CallOverrides): Promise<[string]>;

    wPowerPerpPool(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUniPositionToken(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FUNDING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  TWAP_PERIOD(overrides?: CallOverrides): Promise<number>;

  applyFunding(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnPowerPerpAmount(
    _vaultId: BigNumberish,
    _powerPerpAmount: BigNumberish,
    _withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnWPowerPerpAmount(
    _vaultId: BigNumberish,
    _wPowerPerpAmount: BigNumberish,
    _withdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _vaultId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositUniPositionToken(
    _vaultId: BigNumberish,
    _uniTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  donate(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethQuoteCurrencyPool(overrides?: CallOverrides): Promise<string>;

  feeRate(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  getDenormalizedMark(
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDenormalizedMarkForFunding(
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExpectedNormalizationFactor(overrides?: CallOverrides): Promise<BigNumber>;

  getIndex(
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnscaledIndex(
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  indexForSettlement(overrides?: CallOverrides): Promise<BigNumber>;

  isShutDown(overrides?: CallOverrides): Promise<boolean>;

  isSystemPaused(overrides?: CallOverrides): Promise<boolean>;

  isVaultSafe(
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastFundingUpdateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

  liquidate(
    _vaultId: BigNumberish,
    _maxDebtAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPowerPerpAmount(
    _vaultId: BigNumberish,
    _powerPerpAmount: BigNumberish,
    _uniTokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWPowerPerpAmount(
    _vaultId: BigNumberish,
    _wPowerPerpAmount: BigNumberish,
    _uniTokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  normalizationFactor(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pausesLeft(overrides?: CallOverrides): Promise<BigNumber>;

  quoteCurrency(overrides?: CallOverrides): Promise<string>;

  redeemLong(
    _wPerpAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemShort(
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reduceDebt(
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reduceDebtShutdown(
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRate(
    _newFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    _newFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortPowerPerp(overrides?: CallOverrides): Promise<string>;

  shutDown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unPauseAnyone(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unPauseOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOperator(
    _vaultId: BigNumberish,
    _operator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaults(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber] & {
      operator: string;
      NftCollateralId: number;
      collateralAmount: BigNumber;
      shortAmount: BigNumber;
    }
  >;

  wPowerPerp(overrides?: CallOverrides): Promise<string>;

  wPowerPerpPool(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _vaultId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUniPositionToken(
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FUNDING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    TWAP_PERIOD(overrides?: CallOverrides): Promise<number>;

    applyFunding(overrides?: CallOverrides): Promise<void>;

    burnPowerPerpAmount(
      _vaultId: BigNumberish,
      _powerPerpAmount: BigNumberish,
      _withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnWPowerPerpAmount(
      _vaultId: BigNumberish,
      _wPowerPerpAmount: BigNumberish,
      _withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(_vaultId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositUniPositionToken(
      _vaultId: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    donate(overrides?: CallOverrides): Promise<void>;

    ethQuoteCurrencyPool(overrides?: CallOverrides): Promise<string>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    getDenormalizedMark(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDenormalizedMarkForFunding(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpectedNormalizationFactor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndex(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnscaledIndex(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexForSettlement(overrides?: CallOverrides): Promise<BigNumber>;

    isShutDown(overrides?: CallOverrides): Promise<boolean>;

    isSystemPaused(overrides?: CallOverrides): Promise<boolean>;

    isVaultSafe(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastFundingUpdateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      _vaultId: BigNumberish,
      _maxDebtAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPowerPerpAmount(
      _vaultId: BigNumberish,
      _powerPerpAmount: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    mintWPowerPerpAmount(
      _vaultId: BigNumberish,
      _wPowerPerpAmount: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    normalizationFactor(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    pausesLeft(overrides?: CallOverrides): Promise<BigNumber>;

    quoteCurrency(overrides?: CallOverrides): Promise<string>;

    redeemLong(
      _wPerpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemShort(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reduceDebt(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reduceDebtShutdown(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeeRate(
      _newFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      _newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shortPowerPerp(overrides?: CallOverrides): Promise<string>;

    shutDown(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unPauseAnyone(overrides?: CallOverrides): Promise<void>;

    unPauseOwner(overrides?: CallOverrides): Promise<void>;

    updateOperator(
      _vaultId: BigNumberish,
      _operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber] & {
        operator: string;
        NftCollateralId: number;
        collateralAmount: BigNumber;
        shortAmount: BigNumber;
      }
    >;

    wPowerPerp(overrides?: CallOverrides): Promise<string>;

    wPowerPerpPool(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUniPositionToken(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BurnShort(address,uint256,uint256)"(
      sender?: null,
      amount?: null,
      vaultId?: null
    ): BurnShortEventFilter;
    BurnShort(
      sender?: null,
      amount?: null,
      vaultId?: null
    ): BurnShortEventFilter;

    "DepositCollateral(address,uint256,uint256)"(
      sender?: null,
      vaultId?: null,
      amount?: null
    ): DepositCollateralEventFilter;
    DepositCollateral(
      sender?: null,
      vaultId?: null,
      amount?: null
    ): DepositCollateralEventFilter;

    "DepositUniPositionToken(address,uint256,uint256)"(
      sender?: null,
      vaultId?: null,
      tokenId?: null
    ): DepositUniPositionTokenEventFilter;
    DepositUniPositionToken(
      sender?: null,
      vaultId?: null,
      tokenId?: null
    ): DepositUniPositionTokenEventFilter;

    "FeeRateUpdated(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): FeeRateUpdatedEventFilter;
    FeeRateUpdated(oldFee?: null, newFee?: null): FeeRateUpdatedEventFilter;

    "FeeRecipientUpdated(address,address)"(
      oldFeeRecipient?: null,
      newFeeRecipient?: null
    ): FeeRecipientUpdatedEventFilter;
    FeeRecipientUpdated(
      oldFeeRecipient?: null,
      newFeeRecipient?: null
    ): FeeRecipientUpdatedEventFilter;

    "Liquidate(address,uint256,uint256,uint256)"(
      liquidator?: null,
      vaultId?: null,
      debtAmount?: null,
      collateralPaid?: null
    ): LiquidateEventFilter;
    Liquidate(
      liquidator?: null,
      vaultId?: null,
      debtAmount?: null,
      collateralPaid?: null
    ): LiquidateEventFilter;

    "MintShort(address,uint256,uint256)"(
      sender?: null,
      amount?: null,
      vaultId?: null
    ): MintShortEventFilter;
    MintShort(
      sender?: null,
      amount?: null,
      vaultId?: null
    ): MintShortEventFilter;

    "NormalizationFactorUpdated(uint256,uint256,uint256,uint256)"(
      oldNormFactor?: null,
      newNormFactor?: null,
      lastModificationTimestamp?: null,
      timestamp?: null
    ): NormalizationFactorUpdatedEventFilter;
    NormalizationFactorUpdated(
      oldNormFactor?: null,
      newNormFactor?: null,
      lastModificationTimestamp?: null,
      timestamp?: null
    ): NormalizationFactorUpdatedEventFilter;

    "OpenVault(address,uint256)"(
      sender?: null,
      vaultId?: null
    ): OpenVaultEventFilter;
    OpenVault(sender?: null, vaultId?: null): OpenVaultEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(uint256)"(pausesLeft?: null): PausedEventFilter;
    Paused(pausesLeft?: null): PausedEventFilter;

    "RedeemLong(address,uint256,uint256)"(
      sender?: null,
      wPowerPerpAmount?: null,
      payoutAmount?: null
    ): RedeemLongEventFilter;
    RedeemLong(
      sender?: null,
      wPowerPerpAmount?: null,
      payoutAmount?: null
    ): RedeemLongEventFilter;

    "RedeemShort(address,uint256,uint256)"(
      sender?: null,
      vauldId?: null,
      collateralAmount?: null
    ): RedeemShortEventFilter;
    RedeemShort(
      sender?: null,
      vauldId?: null,
      collateralAmount?: null
    ): RedeemShortEventFilter;

    "ReduceDebt(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      sender?: null,
      vaultId?: null,
      ethRedeemed?: null,
      wPowerPerpRedeemed?: null,
      wPowerPerpBurned?: null,
      wPowerPerpExcess?: null,
      bounty?: null
    ): ReduceDebtEventFilter;
    ReduceDebt(
      sender?: null,
      vaultId?: null,
      ethRedeemed?: null,
      wPowerPerpRedeemed?: null,
      wPowerPerpBurned?: null,
      wPowerPerpExcess?: null,
      bounty?: null
    ): ReduceDebtEventFilter;

    "Shutdown(uint256)"(indexForSettlement?: null): ShutdownEventFilter;
    Shutdown(indexForSettlement?: null): ShutdownEventFilter;

    "UnPaused(address)"(unpauser?: null): UnPausedEventFilter;
    UnPaused(unpauser?: null): UnPausedEventFilter;

    "UpdateOperator(address,uint256,address)"(
      sender?: null,
      vaultId?: null,
      operator?: null
    ): UpdateOperatorEventFilter;
    UpdateOperator(
      sender?: null,
      vaultId?: null,
      operator?: null
    ): UpdateOperatorEventFilter;

    "WithdrawCollateral(address,uint256,uint256)"(
      sender?: null,
      vaultId?: null,
      amount?: null
    ): WithdrawCollateralEventFilter;
    WithdrawCollateral(
      sender?: null,
      vaultId?: null,
      amount?: null
    ): WithdrawCollateralEventFilter;

    "WithdrawUniPositionToken(address,uint256,uint256)"(
      sender?: null,
      vaultId?: null,
      tokenId?: null
    ): WithdrawUniPositionTokenEventFilter;
    WithdrawUniPositionToken(
      sender?: null,
      vaultId?: null,
      tokenId?: null
    ): WithdrawUniPositionTokenEventFilter;
  };

  estimateGas: {
    FUNDING_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    TWAP_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    applyFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnPowerPerpAmount(
      _vaultId: BigNumberish,
      _powerPerpAmount: BigNumberish,
      _withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnWPowerPerpAmount(
      _vaultId: BigNumberish,
      _wPowerPerpAmount: BigNumberish,
      _withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositUniPositionToken(
      _vaultId: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    donate(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethQuoteCurrencyPool(overrides?: CallOverrides): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getDenormalizedMark(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDenormalizedMarkForFunding(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpectedNormalizationFactor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndex(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnscaledIndex(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexForSettlement(overrides?: CallOverrides): Promise<BigNumber>;

    isShutDown(overrides?: CallOverrides): Promise<BigNumber>;

    isSystemPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isVaultSafe(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastFundingUpdateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lastPauseTime(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      _vaultId: BigNumberish,
      _maxDebtAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPowerPerpAmount(
      _vaultId: BigNumberish,
      _powerPerpAmount: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWPowerPerpAmount(
      _vaultId: BigNumberish,
      _wPowerPerpAmount: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    normalizationFactor(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pausesLeft(overrides?: CallOverrides): Promise<BigNumber>;

    quoteCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    redeemLong(
      _wPerpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemShort(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reduceDebt(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reduceDebtShutdown(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRate(
      _newFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortPowerPerp(overrides?: CallOverrides): Promise<BigNumber>;

    shutDown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unPauseAnyone(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unPauseOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOperator(
      _vaultId: BigNumberish,
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    wPowerPerp(overrides?: CallOverrides): Promise<BigNumber>;

    wPowerPerpPool(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUniPositionToken(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FUNDING_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TWAP_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnPowerPerpAmount(
      _vaultId: BigNumberish,
      _powerPerpAmount: BigNumberish,
      _withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnWPowerPerpAmount(
      _vaultId: BigNumberish,
      _wPowerPerpAmount: BigNumberish,
      _withdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _vaultId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositUniPositionToken(
      _vaultId: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethQuoteCurrencyPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDenormalizedMark(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDenormalizedMarkForFunding(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpectedNormalizationFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndex(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnscaledIndex(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexForSettlement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isShutDown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSystemPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isVaultSafe(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastFundingUpdateTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPauseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      _vaultId: BigNumberish,
      _maxDebtAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPowerPerpAmount(
      _vaultId: BigNumberish,
      _powerPerpAmount: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWPowerPerpAmount(
      _vaultId: BigNumberish,
      _wPowerPerpAmount: BigNumberish,
      _uniTokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    normalizationFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pausesLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemLong(
      _wPerpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemShort(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reduceDebt(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reduceDebtShutdown(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRate(
      _newFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortPowerPerp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shutDown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unPauseAnyone(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unPauseOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOperator(
      _vaultId: BigNumberish,
      _operator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wPowerPerp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wPowerPerpPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _vaultId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUniPositionToken(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
