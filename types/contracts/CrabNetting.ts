/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OrderStruct = {
  bidId: BigNumberish;
  trader: string;
  quantity: BigNumberish;
  price: BigNumberish;
  isBuying: boolean;
  expiry: BigNumberish;
  nonce: BigNumberish;
  v: BigNumberish;
  r: BytesLike;
  s: BytesLike;
};

export type OrderStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber,
  number,
  string,
  string
] & {
  bidId: BigNumber;
  trader: string;
  quantity: BigNumber;
  price: BigNumber;
  isBuying: boolean;
  expiry: BigNumber;
  nonce: BigNumber;
  v: number;
  r: string;
  s: string;
};

export type DepositAuctionParamsStruct = {
  depositsQueued: BigNumberish;
  minEth: BigNumberish;
  totalDeposit: BigNumberish;
  orders: OrderStruct[];
  clearingPrice: BigNumberish;
  ethToFlashDeposit: BigNumberish;
  ethUSDFee: BigNumberish;
  flashDepositFee: BigNumberish;
};

export type DepositAuctionParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  OrderStructOutput[],
  BigNumber,
  BigNumber,
  number,
  number
] & {
  depositsQueued: BigNumber;
  minEth: BigNumber;
  totalDeposit: BigNumber;
  orders: OrderStructOutput[];
  clearingPrice: BigNumber;
  ethToFlashDeposit: BigNumber;
  ethUSDFee: number;
  flashDepositFee: number;
};

export type WithdrawAuctionParamsStruct = {
  crabToWithdraw: BigNumberish;
  orders: OrderStruct[];
  clearingPrice: BigNumberish;
  minUSDC: BigNumberish;
  ethUSDFee: BigNumberish;
};

export type WithdrawAuctionParamsStructOutput = [
  BigNumber,
  OrderStructOutput[],
  BigNumber,
  BigNumber,
  number
] & {
  crabToWithdraw: BigNumber;
  orders: OrderStructOutput[];
  clearingPrice: BigNumber;
  minUSDC: BigNumber;
  ethUSDFee: number;
};

export interface CrabNettingInterface extends utils.Interface {
  contractName: "CrabNetting";
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MAX_OTC_PRICE_TOLERANCE()": FunctionFragment;
    "auctionTwapPeriod()": FunctionFragment;
    "checkOrder((uint256,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "crab()": FunctionFragment;
    "crabBalance(address)": FunctionFragment;
    "depositAuction((uint256,uint256,uint256,(uint256,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32)[],uint256,uint256,uint24,uint24))": FunctionFragment;
    "depositUSDC(uint256)": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "depositsIndex()": FunctionFragment;
    "depositsQueued()": FunctionFragment;
    "dequeueCrab(uint256,bool)": FunctionFragment;
    "ethSqueethPool()": FunctionFragment;
    "ethUsdcPool()": FunctionFragment;
    "isAuctionLive()": FunctionFragment;
    "minCrabAmount()": FunctionFragment;
    "minUSDCAmount()": FunctionFragment;
    "netAtPrice(uint256,uint256)": FunctionFragment;
    "nonces(address,uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "otcPriceTolerance()": FunctionFragment;
    "owner()": FunctionFragment;
    "queueCrabForWithdrawal(uint256)": FunctionFragment;
    "rejectWithdraw(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAuctionTwapPeriod(uint32)": FunctionFragment;
    "setDepositsIndex(uint256)": FunctionFragment;
    "setMinCrab(uint256)": FunctionFragment;
    "setMinUSDC(uint256)": FunctionFragment;
    "setNonceTrue(uint256)": FunctionFragment;
    "setOTCPriceTolerance(uint256)": FunctionFragment;
    "setWithdrawsIndex(uint256)": FunctionFragment;
    "sqth()": FunctionFragment;
    "sqthController()": FunctionFragment;
    "sqthTwapPeriod()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "toggleAuctionLive()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdBalance(address)": FunctionFragment;
    "usdc()": FunctionFragment;
    "userDepositsIndex(address,uint256)": FunctionFragment;
    "userWithdrawsIndex(address,uint256)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawAuction((uint256,(uint256,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32)[],uint256,uint256,uint24))": FunctionFragment;
    "withdrawUSDC(uint256,bool)": FunctionFragment;
    "withdraws(uint256)": FunctionFragment;
    "withdrawsIndex()": FunctionFragment;
    "withdrawsQueued()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OTC_PRICE_TOLERANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionTwapPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkOrder",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(functionFragment: "crab", values?: undefined): string;
  encodeFunctionData(functionFragment: "crabBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositAuction",
    values: [DepositAuctionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUSDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositsIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositsQueued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dequeueCrab",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ethSqueethPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethUsdcPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuctionLive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCrabAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minUSDCAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "netAtPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "otcPriceTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queueCrabForWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionTwapPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositsIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCrab",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinUSDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonceTrue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOTCPriceTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawsIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sqth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sqthController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sqthTwapPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleAuctionLive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdBalance", values: [string]): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userDepositsIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdrawsIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAuction",
    values: [WithdrawAuctionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUSDC",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraws",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawsIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawsQueued",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OTC_PRICE_TOLERANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionTwapPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crab", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "crabBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositsQueued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dequeueCrab",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethSqueethPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethUsdcPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionLive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCrabAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minUSDCAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "netAtPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "otcPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueCrabForWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionTwapPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinCrab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinUSDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNonceTrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOTCPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sqth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sqthController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sqthTwapPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleAuctionLive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDepositsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdrawsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraws", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawsQueued",
    data: BytesLike
  ): Result;

  events: {
    "BidTraded(uint256,address,uint256,uint256,bool)": EventFragment;
    "CrabDeQueued(address,uint256,uint256)": EventFragment;
    "CrabQueued(address,uint256,uint256,uint256)": EventFragment;
    "CrabWithdrawn(address,uint256,uint256,uint256)": EventFragment;
    "NonceTrue(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAuctionTwapPeriod(uint32,uint32)": EventFragment;
    "SetDepositsIndex(uint256)": EventFragment;
    "SetMinCrab(uint256)": EventFragment;
    "SetMinUSDC(uint256)": EventFragment;
    "SetOTCPriceTolerance(uint256,uint256)": EventFragment;
    "SetWithdrawsIndex(uint256)": EventFragment;
    "ToggledAuctionLive(bool)": EventFragment;
    "USDCDeQueued(address,uint256,uint256)": EventFragment;
    "USDCDeposited(address,uint256,uint256,uint256,uint256)": EventFragment;
    "USDCQueued(address,uint256,uint256,uint256)": EventFragment;
    "WithdrawRejected(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidTraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrabDeQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrabQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrabWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonceTrue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAuctionTwapPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDepositsIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinCrab"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinUSDC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOTCPriceTolerance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWithdrawsIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ToggledAuctionLive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDCDeQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDCDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDCQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRejected"): EventFragment;
}

export type BidTradedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, boolean],
  {
    bidId: BigNumber;
    trader: string;
    quantity: BigNumber;
    price: BigNumber;
    isBuying: boolean;
  }
>;

export type BidTradedEventFilter = TypedEventFilter<BidTradedEvent>;

export type CrabDeQueuedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { withdrawer: string; amount: BigNumber; withdrawersBalance: BigNumber }
>;

export type CrabDeQueuedEventFilter = TypedEventFilter<CrabDeQueuedEvent>;

export type CrabQueuedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    withdrawer: string;
    amount: BigNumber;
    withdrawersBalance: BigNumber;
    receiptIndex: BigNumber;
  }
>;

export type CrabQueuedEventFilter = TypedEventFilter<CrabQueuedEvent>;

export type CrabWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    withdrawer: string;
    crabAmount: BigNumber;
    usdcAmount: BigNumber;
    receiptIndex: BigNumber;
  }
>;

export type CrabWithdrawnEventFilter = TypedEventFilter<CrabWithdrawnEvent>;

export type NonceTrueEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; nonce: BigNumber }
>;

export type NonceTrueEventFilter = TypedEventFilter<NonceTrueEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SetAuctionTwapPeriodEvent = TypedEvent<
  [number, number],
  { previousTwap: number; newTwap: number }
>;

export type SetAuctionTwapPeriodEventFilter =
  TypedEventFilter<SetAuctionTwapPeriodEvent>;

export type SetDepositsIndexEvent = TypedEvent<
  [BigNumber],
  { newDepositsIndex: BigNumber }
>;

export type SetDepositsIndexEventFilter =
  TypedEventFilter<SetDepositsIndexEvent>;

export type SetMinCrabEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type SetMinCrabEventFilter = TypedEventFilter<SetMinCrabEvent>;

export type SetMinUSDCEvent = TypedEvent<[BigNumber], { amount: BigNumber }>;

export type SetMinUSDCEventFilter = TypedEventFilter<SetMinUSDCEvent>;

export type SetOTCPriceToleranceEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousTolerance: BigNumber; newOtcPriceTolerance: BigNumber }
>;

export type SetOTCPriceToleranceEventFilter =
  TypedEventFilter<SetOTCPriceToleranceEvent>;

export type SetWithdrawsIndexEvent = TypedEvent<
  [BigNumber],
  { newWithdrawsIndex: BigNumber }
>;

export type SetWithdrawsIndexEventFilter =
  TypedEventFilter<SetWithdrawsIndexEvent>;

export type ToggledAuctionLiveEvent = TypedEvent<
  [boolean],
  { isAuctionLive: boolean }
>;

export type ToggledAuctionLiveEventFilter =
  TypedEventFilter<ToggledAuctionLiveEvent>;

export type USDCDeQueuedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { depositor: string; amount: BigNumber; depositorsBalance: BigNumber }
>;

export type USDCDeQueuedEventFilter = TypedEventFilter<USDCDeQueuedEvent>;

export type USDCDepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    depositor: string;
    usdcAmount: BigNumber;
    crabAmount: BigNumber;
    receiptIndex: BigNumber;
    refundedETH: BigNumber;
  }
>;

export type USDCDepositedEventFilter = TypedEventFilter<USDCDepositedEvent>;

export type USDCQueuedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    depositor: string;
    amount: BigNumber;
    depositorsBalance: BigNumber;
    receiptIndex: BigNumber;
  }
>;

export type USDCQueuedEventFilter = TypedEventFilter<USDCQueuedEvent>;

export type WithdrawRejectedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { withdrawer: string; crabAmount: BigNumber; index: BigNumber }
>;

export type WithdrawRejectedEventFilter =
  TypedEventFilter<WithdrawRejectedEvent>;

export interface CrabNetting extends BaseContract {
  contractName: "CrabNetting";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrabNettingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionTwapPeriod(overrides?: CallOverrides): Promise<[number]>;

    checkOrder(_order: OrderStruct, overrides?: CallOverrides): Promise<[void]>;

    crab(overrides?: CallOverrides): Promise<[string]>;

    crabBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositAuction(
      _p: DepositAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositUSDC(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sender: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    depositsIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositsQueued(overrides?: CallOverrides): Promise<[BigNumber]>;

    dequeueCrab(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethSqueethPool(overrides?: CallOverrides): Promise<[string]>;

    ethUsdcPool(overrides?: CallOverrides): Promise<[string]>;

    isAuctionLive(overrides?: CallOverrides): Promise<[boolean]>;

    minCrabAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minUSDCAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    netAtPrice(
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queueCrabForWithdrawal(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rejectWithdraw(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionTwapPeriod(
      _auctionTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositsIndex(
      _newDepositsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinCrab(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinUSDC(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawsIndex(
      _newWithdrawsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sqth(overrides?: CallOverrides): Promise<[string]>;

    sqthController(overrides?: CallOverrides): Promise<[string]>;

    sqthTwapPeriod(overrides?: CallOverrides): Promise<[number]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    toggleAuctionLive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    userDepositsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userWithdrawsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawAuction(
      _p: WithdrawAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUSDC(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sender: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    withdrawsIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawsQueued(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

  auctionTwapPeriod(overrides?: CallOverrides): Promise<number>;

  checkOrder(_order: OrderStruct, overrides?: CallOverrides): Promise<void>;

  crab(overrides?: CallOverrides): Promise<string>;

  crabBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositAuction(
    _p: DepositAuctionParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositUSDC(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      sender: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  depositsIndex(overrides?: CallOverrides): Promise<BigNumber>;

  depositsQueued(overrides?: CallOverrides): Promise<BigNumber>;

  dequeueCrab(
    _amount: BigNumberish,
    _force: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethSqueethPool(overrides?: CallOverrides): Promise<string>;

  ethUsdcPool(overrides?: CallOverrides): Promise<string>;

  isAuctionLive(overrides?: CallOverrides): Promise<boolean>;

  minCrabAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minUSDCAmount(overrides?: CallOverrides): Promise<BigNumber>;

  netAtPrice(
    _price: BigNumberish,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracle(overrides?: CallOverrides): Promise<string>;

  otcPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  queueCrabForWithdrawal(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rejectWithdraw(
    i: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionTwapPeriod(
    _auctionTwapPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositsIndex(
    _newDepositsIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinCrab(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinUSDC(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNonceTrue(
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOTCPriceTolerance(
    _otcPriceTolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawsIndex(
    _newWithdrawsIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sqth(overrides?: CallOverrides): Promise<string>;

  sqthController(overrides?: CallOverrides): Promise<string>;

  sqthTwapPeriod(overrides?: CallOverrides): Promise<number>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  toggleAuctionLive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  usdc(overrides?: CallOverrides): Promise<string>;

  userDepositsIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userWithdrawsIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawAuction(
    _p: WithdrawAuctionParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUSDC(
    _amount: BigNumberish,
    _force: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraws(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      sender: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  withdrawsIndex(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawsQueued(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    auctionTwapPeriod(overrides?: CallOverrides): Promise<number>;

    checkOrder(_order: OrderStruct, overrides?: CallOverrides): Promise<void>;

    crab(overrides?: CallOverrides): Promise<string>;

    crabBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositAuction(
      _p: DepositAuctionParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositUSDC(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sender: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    depositsIndex(overrides?: CallOverrides): Promise<BigNumber>;

    depositsQueued(overrides?: CallOverrides): Promise<BigNumber>;

    dequeueCrab(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    ethSqueethPool(overrides?: CallOverrides): Promise<string>;

    ethUsdcPool(overrides?: CallOverrides): Promise<string>;

    isAuctionLive(overrides?: CallOverrides): Promise<boolean>;

    minCrabAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minUSDCAmount(overrides?: CallOverrides): Promise<BigNumber>;

    netAtPrice(
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracle(overrides?: CallOverrides): Promise<string>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    queueCrabForWithdrawal(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectWithdraw(i: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAuctionTwapPeriod(
      _auctionTwapPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositsIndex(
      _newDepositsIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinCrab(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMinUSDC(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawsIndex(
      _newWithdrawsIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sqth(overrides?: CallOverrides): Promise<string>;

    sqthController(overrides?: CallOverrides): Promise<string>;

    sqthTwapPeriod(overrides?: CallOverrides): Promise<number>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    toggleAuctionLive(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<string>;

    userDepositsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWithdrawsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawAuction(
      _p: WithdrawAuctionParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUSDC(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        sender: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    withdrawsIndex(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawsQueued(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BidTraded(uint256,address,uint256,uint256,bool)"(
      bidId?: BigNumberish | null,
      trader?: string | null,
      quantity?: null,
      price?: null,
      isBuying?: null
    ): BidTradedEventFilter;
    BidTraded(
      bidId?: BigNumberish | null,
      trader?: string | null,
      quantity?: null,
      price?: null,
      isBuying?: null
    ): BidTradedEventFilter;

    "CrabDeQueued(address,uint256,uint256)"(
      withdrawer?: string | null,
      amount?: null,
      withdrawersBalance?: null
    ): CrabDeQueuedEventFilter;
    CrabDeQueued(
      withdrawer?: string | null,
      amount?: null,
      withdrawersBalance?: null
    ): CrabDeQueuedEventFilter;

    "CrabQueued(address,uint256,uint256,uint256)"(
      withdrawer?: string | null,
      amount?: null,
      withdrawersBalance?: null,
      receiptIndex?: BigNumberish | null
    ): CrabQueuedEventFilter;
    CrabQueued(
      withdrawer?: string | null,
      amount?: null,
      withdrawersBalance?: null,
      receiptIndex?: BigNumberish | null
    ): CrabQueuedEventFilter;

    "CrabWithdrawn(address,uint256,uint256,uint256)"(
      withdrawer?: string | null,
      crabAmount?: null,
      usdcAmount?: null,
      receiptIndex?: BigNumberish | null
    ): CrabWithdrawnEventFilter;
    CrabWithdrawn(
      withdrawer?: string | null,
      crabAmount?: null,
      usdcAmount?: null,
      receiptIndex?: BigNumberish | null
    ): CrabWithdrawnEventFilter;

    "NonceTrue(address,uint256)"(
      sender?: null,
      nonce?: null
    ): NonceTrueEventFilter;
    NonceTrue(sender?: null, nonce?: null): NonceTrueEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetAuctionTwapPeriod(uint32,uint32)"(
      previousTwap?: null,
      newTwap?: null
    ): SetAuctionTwapPeriodEventFilter;
    SetAuctionTwapPeriod(
      previousTwap?: null,
      newTwap?: null
    ): SetAuctionTwapPeriodEventFilter;

    "SetDepositsIndex(uint256)"(
      newDepositsIndex?: null
    ): SetDepositsIndexEventFilter;
    SetDepositsIndex(newDepositsIndex?: null): SetDepositsIndexEventFilter;

    "SetMinCrab(uint256)"(amount?: null): SetMinCrabEventFilter;
    SetMinCrab(amount?: null): SetMinCrabEventFilter;

    "SetMinUSDC(uint256)"(amount?: null): SetMinUSDCEventFilter;
    SetMinUSDC(amount?: null): SetMinUSDCEventFilter;

    "SetOTCPriceTolerance(uint256,uint256)"(
      previousTolerance?: null,
      newOtcPriceTolerance?: null
    ): SetOTCPriceToleranceEventFilter;
    SetOTCPriceTolerance(
      previousTolerance?: null,
      newOtcPriceTolerance?: null
    ): SetOTCPriceToleranceEventFilter;

    "SetWithdrawsIndex(uint256)"(
      newWithdrawsIndex?: null
    ): SetWithdrawsIndexEventFilter;
    SetWithdrawsIndex(newWithdrawsIndex?: null): SetWithdrawsIndexEventFilter;

    "ToggledAuctionLive(bool)"(
      isAuctionLive?: null
    ): ToggledAuctionLiveEventFilter;
    ToggledAuctionLive(isAuctionLive?: null): ToggledAuctionLiveEventFilter;

    "USDCDeQueued(address,uint256,uint256)"(
      depositor?: string | null,
      amount?: null,
      depositorsBalance?: null
    ): USDCDeQueuedEventFilter;
    USDCDeQueued(
      depositor?: string | null,
      amount?: null,
      depositorsBalance?: null
    ): USDCDeQueuedEventFilter;

    "USDCDeposited(address,uint256,uint256,uint256,uint256)"(
      depositor?: string | null,
      usdcAmount?: null,
      crabAmount?: null,
      receiptIndex?: BigNumberish | null,
      refundedETH?: null
    ): USDCDepositedEventFilter;
    USDCDeposited(
      depositor?: string | null,
      usdcAmount?: null,
      crabAmount?: null,
      receiptIndex?: BigNumberish | null,
      refundedETH?: null
    ): USDCDepositedEventFilter;

    "USDCQueued(address,uint256,uint256,uint256)"(
      depositor?: string | null,
      amount?: null,
      depositorsBalance?: null,
      receiptIndex?: BigNumberish | null
    ): USDCQueuedEventFilter;
    USDCQueued(
      depositor?: string | null,
      amount?: null,
      depositorsBalance?: null,
      receiptIndex?: BigNumberish | null
    ): USDCQueuedEventFilter;

    "WithdrawRejected(address,uint256,uint256)"(
      withdrawer?: string | null,
      crabAmount?: null,
      index?: null
    ): WithdrawRejectedEventFilter;
    WithdrawRejected(
      withdrawer?: string | null,
      crabAmount?: null,
      index?: null
    ): WithdrawRejectedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    auctionTwapPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    checkOrder(
      _order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crab(overrides?: CallOverrides): Promise<BigNumber>;

    crabBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositAuction(
      _p: DepositAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositUSDC(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    depositsIndex(overrides?: CallOverrides): Promise<BigNumber>;

    depositsQueued(overrides?: CallOverrides): Promise<BigNumber>;

    dequeueCrab(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethSqueethPool(overrides?: CallOverrides): Promise<BigNumber>;

    ethUsdcPool(overrides?: CallOverrides): Promise<BigNumber>;

    isAuctionLive(overrides?: CallOverrides): Promise<BigNumber>;

    minCrabAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minUSDCAmount(overrides?: CallOverrides): Promise<BigNumber>;

    netAtPrice(
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queueCrabForWithdrawal(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rejectWithdraw(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionTwapPeriod(
      _auctionTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositsIndex(
      _newDepositsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinCrab(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinUSDC(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawsIndex(
      _newWithdrawsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sqth(overrides?: CallOverrides): Promise<BigNumber>;

    sqthController(overrides?: CallOverrides): Promise<BigNumber>;

    sqthTwapPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    toggleAuctionLive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    userDepositsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWithdrawsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAuction(
      _p: WithdrawAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUSDC(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawsIndex(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawsQueued(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_OTC_PRICE_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionTwapPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkOrder(
      _order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crabBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositAuction(
      _p: DepositAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositUSDC(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositsIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositsQueued(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dequeueCrab(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethSqueethPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethUsdcPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAuctionLive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minCrabAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minUSDCAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    netAtPrice(
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueCrabForWithdrawal(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rejectWithdraw(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionTwapPeriod(
      _auctionTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositsIndex(
      _newDepositsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinCrab(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinUSDC(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawsIndex(
      _newWithdrawsIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sqth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sqthController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sqthTwapPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleAuctionLive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDepositsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userWithdrawsIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAuction(
      _p: WithdrawAuctionParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUSDC(
      _amount: BigNumberish,
      _force: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraws(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawsIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawsQueued(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}