/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace CrabOTC {
  export type OrderStruct = {
    initiator: string;
    trader: string;
    quantity: BigNumberish;
    price: BigNumberish;
    isBuying: boolean;
    expiry: BigNumberish;
    nonce: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type OrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ] & {
    initiator: string;
    trader: string;
    quantity: BigNumber;
    price: BigNumber;
    isBuying: boolean;
    expiry: BigNumber;
    nonce: BigNumber;
    v: number;
    r: string;
    s: string;
  };
}

export interface CrabOtcInterface extends utils.Interface {
  contractName: "CrabOtc";
  functions: {
    "controller()": FunctionFragment;
    "crab()": FunctionFragment;
    "deposit(uint256,(address,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "nonces(address,uint256)": FunctionFragment;
    "setNonceTrue(uint256)": FunctionFragment;
    "wPowerPerp()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(uint256,uint256,(address,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crab", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, CrabOTC.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonceTrue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wPowerPerp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, CrabOTC.OrderStruct]
  ): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNonceTrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wPowerPerp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "DepositOTC(address,uint256,uint256,uint256,uint256,address)": EventFragment;
    "WithdrawOTC(address,uint256,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositOTC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawOTC"): EventFragment;
}

export type DepositOTCEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
  {
    depositor: string;
    crabAmount: BigNumber;
    wSqueethAmount: BigNumber;
    depositedAmount: BigNumber;
    executedPrice: BigNumber;
    trader: string;
  }
>;

export type DepositOTCEventFilter = TypedEventFilter<DepositOTCEvent>;

export type WithdrawOTCEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
  {
    depositor: string;
    crabAmount: BigNumber;
    ethSent: BigNumber;
    wSqueethAmount: BigNumber;
    executedPrice: BigNumber;
    trader: string;
  }
>;

export type WithdrawOTCEventFilter = TypedEventFilter<WithdrawOTCEvent>;

export interface CrabOtc extends BaseContract {
  contractName: "CrabOtc";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrabOtcInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    controller(overrides?: CallOverrides): Promise<[string]>;

    crab(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _totalEth: BigNumberish,
      _order: CrabOTC.OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wPowerPerp(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _crabAmount: BigNumberish,
      _maxPrice: BigNumberish,
      _order: CrabOTC.OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  controller(overrides?: CallOverrides): Promise<string>;

  crab(overrides?: CallOverrides): Promise<string>;

  deposit(
    _totalEth: BigNumberish,
    _order: CrabOTC.OrderStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setNonceTrue(
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wPowerPerp(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _crabAmount: BigNumberish,
    _maxPrice: BigNumberish,
    _order: CrabOTC.OrderStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    controller(overrides?: CallOverrides): Promise<string>;

    crab(overrides?: CallOverrides): Promise<string>;

    deposit(
      _totalEth: BigNumberish,
      _order: CrabOTC.OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wPowerPerp(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _crabAmount: BigNumberish,
      _maxPrice: BigNumberish,
      _order: CrabOTC.OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositOTC(address,uint256,uint256,uint256,uint256,address)"(
      depositor?: string | null,
      crabAmount?: null,
      wSqueethAmount?: null,
      depositedAmount?: null,
      executedPrice?: null,
      trader?: null
    ): DepositOTCEventFilter;
    DepositOTC(
      depositor?: string | null,
      crabAmount?: null,
      wSqueethAmount?: null,
      depositedAmount?: null,
      executedPrice?: null,
      trader?: null
    ): DepositOTCEventFilter;

    "WithdrawOTC(address,uint256,uint256,uint256,uint256,address)"(
      depositor?: string | null,
      crabAmount?: null,
      ethSent?: null,
      wSqueethAmount?: null,
      executedPrice?: null,
      trader?: null
    ): WithdrawOTCEventFilter;
    WithdrawOTC(
      depositor?: string | null,
      crabAmount?: null,
      ethSent?: null,
      wSqueethAmount?: null,
      executedPrice?: null,
      trader?: null
    ): WithdrawOTCEventFilter;
  };

  estimateGas: {
    controller(overrides?: CallOverrides): Promise<BigNumber>;

    crab(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _totalEth: BigNumberish,
      _order: CrabOTC.OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wPowerPerp(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _crabAmount: BigNumberish,
      _maxPrice: BigNumberish,
      _order: CrabOTC.OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _totalEth: BigNumberish,
      _order: CrabOTC.OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wPowerPerp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _crabAmount: BigNumberish,
      _maxPrice: BigNumberish,
      _order: CrabOTC.OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
