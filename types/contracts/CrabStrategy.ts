/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CrabStrategyInterface extends utils.Interface {
  contractName: "CrabStrategy";
  functions: {
    "POWER_PERP_PERIOD()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "auctionTime()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "checkPriceHedge(uint256)": FunctionFragment;
    "checkTimeHedge()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deltaHedgeThreshold()": FunctionFragment;
    "deposit()": FunctionFragment;
    "ethQuoteCurrencyPool()": FunctionFragment;
    "ethWSqueethPool()": FunctionFragment;
    "factory()": FunctionFragment;
    "flashDeposit(uint256)": FunctionFragment;
    "flashWithdraw(uint256,uint256)": FunctionFragment;
    "getAuctionDetails(uint256)": FunctionFragment;
    "getStrategyVaultId()": FunctionFragment;
    "getVaultDetails()": FunctionFragment;
    "getWsqueethFromCrabAmount(uint256)": FunctionFragment;
    "hedgePriceThreshold()": FunctionFragment;
    "hedgeTimeThreshold()": FunctionFragment;
    "hedgingTwapPeriod()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "maxPriceMultiplier()": FunctionFragment;
    "minPriceMultiplier()": FunctionFragment;
    "name()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "powerTokenController()": FunctionFragment;
    "priceAtLastHedge()": FunctionFragment;
    "priceHedge(uint256,bool,uint256)": FunctionFragment;
    "priceHedgeOnUniswap(uint256,uint256,uint256)": FunctionFragment;
    "quoteCurrency()": FunctionFragment;
    "redeemShortShutdown()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAuctionTime(uint256)": FunctionFragment;
    "setDeltaHedgeThreshold(uint256)": FunctionFragment;
    "setHedgePriceThreshold(uint256)": FunctionFragment;
    "setHedgeTimeThreshold(uint256)": FunctionFragment;
    "setHedgingTwapPeriod(uint32)": FunctionFragment;
    "setMaxPriceMultiplier(uint256)": FunctionFragment;
    "setMinPriceMultiplier(uint256)": FunctionFragment;
    "setStrategyCap(uint256)": FunctionFragment;
    "strategyCap()": FunctionFragment;
    "symbol()": FunctionFragment;
    "timeAtLastHedge()": FunctionFragment;
    "timeHedge(bool,uint256)": FunctionFragment;
    "timeHedgeOnUniswap(uint256,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "vaultId()": FunctionFragment;
    "wPowerPerp()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawShutdown(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "POWER_PERP_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkPriceHedge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTimeHedge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deltaHedgeThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ethQuoteCurrencyPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethWSqueethPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flashDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyVaultId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWsqueethFromCrabAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hedgePriceThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hedgeTimeThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hedgingTwapPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPriceMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "powerTokenController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceAtLastHedge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceHedge",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceHedgeOnUniswap",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteCurrency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemShortShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeltaHedgeThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHedgePriceThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHedgeTimeThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHedgingTwapPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPriceMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyCap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeAtLastHedge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeHedge",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeHedgeOnUniswap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vaultId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wPowerPerp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawShutdown",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "POWER_PERP_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkPriceHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTimeHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deltaHedgeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethQuoteCurrencyPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethWSqueethPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flashDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyVaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWsqueethFromCrabAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hedgePriceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hedgeTimeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hedgingTwapPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPriceMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceAtLastHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceHedge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceHedgeOnUniswap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemShortShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeltaHedgeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHedgePriceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHedgeTimeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHedgingTwapPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPriceMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeAtLastHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeHedge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeHedgeOnUniswap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wPowerPerp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawShutdown",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "ExecuteBuyAuction(address,uint256,uint256,bool)": EventFragment;
    "ExecuteSellAuction(address,uint256,uint256,bool)": EventFragment;
    "FlashDeposit(address,uint256,uint256)": EventFragment;
    "FlashDepositCallback(address,uint256,uint256)": EventFragment;
    "FlashWithdraw(address,uint256,uint256)": EventFragment;
    "FlashWithdrawCallback(address,uint256,uint256)": EventFragment;
    "Hedge(address,bool,uint256,uint256,uint256,uint256)": EventFragment;
    "HedgeOnUniswap(address,bool,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceHedge(address,bool,uint256,uint256)": EventFragment;
    "PriceHedgeOnUniswap(address,uint256,uint256,uint256,uint256)": EventFragment;
    "SetAuctionTime(uint256)": EventFragment;
    "SetDeltaHedgeThreshold(uint256)": EventFragment;
    "SetHedgePriceThreshold(uint256)": EventFragment;
    "SetHedgeTimeThreshold(uint256)": EventFragment;
    "SetHedgingTwapPeriod(uint32)": EventFragment;
    "SetMaxPriceMultiplier(uint256)": EventFragment;
    "SetMinPriceMultiplier(uint256)": EventFragment;
    "SetStrategyCap(uint256)": EventFragment;
    "TimeHedge(address,bool,uint256,uint256)": EventFragment;
    "TimeHedgeOnUniswap(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
    "WithdrawShutdown(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteBuyAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteSellAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashDepositCallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashWithdrawCallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Hedge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HedgeOnUniswap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceHedge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceHedgeOnUniswap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAuctionTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDeltaHedgeThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHedgePriceThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHedgeTimeThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHedgingTwapPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxPriceMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinPriceMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStrategyCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeHedge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeHedgeOnUniswap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawShutdown"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { depositor: string; wSqueethAmount: BigNumber; lpAmount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type ExecuteBuyAuctionEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  {
    seller: string;
    wSqueethBought: BigNumber;
    ethSold: BigNumber;
    isHedgingOnUniswap: boolean;
  }
>;

export type ExecuteBuyAuctionEventFilter =
  TypedEventFilter<ExecuteBuyAuctionEvent>;

export type ExecuteSellAuctionEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  {
    buyer: string;
    wSqueethSold: BigNumber;
    ethBought: BigNumber;
    isHedgingOnUniswap: boolean;
  }
>;

export type ExecuteSellAuctionEventFilter =
  TypedEventFilter<ExecuteSellAuctionEvent>;

export type FlashDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { depositor: string; depositedAmount: BigNumber; tradedAmountOut: BigNumber }
>;

export type FlashDepositEventFilter = TypedEventFilter<FlashDepositEvent>;

export type FlashDepositCallbackEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { depositor: string; flashswapDebt: BigNumber; excess: BigNumber }
>;

export type FlashDepositCallbackEventFilter =
  TypedEventFilter<FlashDepositCallbackEvent>;

export type FlashWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { withdrawer: string; crabAmount: BigNumber; wSqueethAmount: BigNumber }
>;

export type FlashWithdrawEventFilter = TypedEventFilter<FlashWithdrawEvent>;

export type FlashWithdrawCallbackEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { withdrawer: string; flashswapDebt: BigNumber; excess: BigNumber }
>;

export type FlashWithdrawCallbackEventFilter =
  TypedEventFilter<FlashWithdrawCallbackEvent>;

export type HedgeEvent = TypedEvent<
  [string, boolean, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    hedger: string;
    auctionType: boolean;
    hedgerPrice: BigNumber;
    auctionPrice: BigNumber;
    wSqueethHedgeTargetAmount: BigNumber;
    ethHedgetargetAmount: BigNumber;
  }
>;

export type HedgeEventFilter = TypedEventFilter<HedgeEvent>;

export type HedgeOnUniswapEvent = TypedEvent<
  [string, boolean, BigNumber, BigNumber, BigNumber],
  {
    hedger: string;
    auctionType: boolean;
    auctionPrice: BigNumber;
    wSqueethHedgeTargetAmount: BigNumber;
    ethHedgetargetAmount: BigNumber;
  }
>;

export type HedgeOnUniswapEventFilter = TypedEventFilter<HedgeOnUniswapEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PriceHedgeEvent = TypedEvent<
  [string, boolean, BigNumber, BigNumber],
  {
    hedger: string;
    auctionType: boolean;
    hedgerPrice: BigNumber;
    auctionTriggerTimestamp: BigNumber;
  }
>;

export type PriceHedgeEventFilter = TypedEventFilter<PriceHedgeEvent>;

export type PriceHedgeOnUniswapEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    hedger: string;
    hedgeTimestamp: BigNumber;
    auctionTriggerTimestamp: BigNumber;
    minWSqueeth: BigNumber;
    minEth: BigNumber;
  }
>;

export type PriceHedgeOnUniswapEventFilter =
  TypedEventFilter<PriceHedgeOnUniswapEvent>;

export type SetAuctionTimeEvent = TypedEvent<
  [BigNumber],
  { newAuctionTime: BigNumber }
>;

export type SetAuctionTimeEventFilter = TypedEventFilter<SetAuctionTimeEvent>;

export type SetDeltaHedgeThresholdEvent = TypedEvent<
  [BigNumber],
  { newDeltaHedgeThreshold: BigNumber }
>;

export type SetDeltaHedgeThresholdEventFilter =
  TypedEventFilter<SetDeltaHedgeThresholdEvent>;

export type SetHedgePriceThresholdEvent = TypedEvent<
  [BigNumber],
  { newHedgePriceThreshold: BigNumber }
>;

export type SetHedgePriceThresholdEventFilter =
  TypedEventFilter<SetHedgePriceThresholdEvent>;

export type SetHedgeTimeThresholdEvent = TypedEvent<
  [BigNumber],
  { newHedgeTimeThreshold: BigNumber }
>;

export type SetHedgeTimeThresholdEventFilter =
  TypedEventFilter<SetHedgeTimeThresholdEvent>;

export type SetHedgingTwapPeriodEvent = TypedEvent<
  [number],
  { newHedgingTwapPeriod: number }
>;

export type SetHedgingTwapPeriodEventFilter =
  TypedEventFilter<SetHedgingTwapPeriodEvent>;

export type SetMaxPriceMultiplierEvent = TypedEvent<
  [BigNumber],
  { newMaxPriceMultiplier: BigNumber }
>;

export type SetMaxPriceMultiplierEventFilter =
  TypedEventFilter<SetMaxPriceMultiplierEvent>;

export type SetMinPriceMultiplierEvent = TypedEvent<
  [BigNumber],
  { newMinPriceMultiplier: BigNumber }
>;

export type SetMinPriceMultiplierEventFilter =
  TypedEventFilter<SetMinPriceMultiplierEvent>;

export type SetStrategyCapEvent = TypedEvent<
  [BigNumber],
  { newCapAmount: BigNumber }
>;

export type SetStrategyCapEventFilter = TypedEventFilter<SetStrategyCapEvent>;

export type TimeHedgeEvent = TypedEvent<
  [string, boolean, BigNumber, BigNumber],
  {
    hedger: string;
    auctionType: boolean;
    hedgerPrice: BigNumber;
    auctionTriggerTimestamp: BigNumber;
  }
>;

export type TimeHedgeEventFilter = TypedEventFilter<TimeHedgeEvent>;

export type TimeHedgeOnUniswapEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    hedger: string;
    hedgeTimestamp: BigNumber;
    auctionTriggerTimestamp: BigNumber;
    minWSqueeth: BigNumber;
    minEth: BigNumber;
  }
>;

export type TimeHedgeOnUniswapEventFilter =
  TypedEventFilter<TimeHedgeOnUniswapEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    withdrawer: string;
    crabAmount: BigNumber;
    wSqueethAmount: BigNumber;
    ethWithdrawn: BigNumber;
  }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export type WithdrawShutdownEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { withdrawer: string; crabAmount: BigNumber; ethWithdrawn: BigNumber }
>;

export type WithdrawShutdownEventFilter =
  TypedEventFilter<WithdrawShutdownEvent>;

export interface CrabStrategy extends BaseContract {
  contractName: "CrabStrategy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrabStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    POWER_PERP_PERIOD(overrides?: CallOverrides): Promise<[number]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    checkPriceHedge(
      _auctionTriggerTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkTimeHedge(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deltaHedgeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethQuoteCurrencyPool(overrides?: CallOverrides): Promise<[string]>;

    ethWSqueethPool(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    flashDeposit(
      _ethToDeposit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashWithdraw(
      _crabAmount: BigNumberish,
      _maxEthToPay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuctionDetails(
      _auctionTriggerTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber, BigNumber, boolean]>;

    getStrategyVaultId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaultDetails(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, BigNumber]>;

    getWsqueethFromCrabAmount(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hedgePriceThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    hedgeTimeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    hedgingTwapPeriod(overrides?: CallOverrides): Promise<[number]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxPriceMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPriceMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    powerTokenController(overrides?: CallOverrides): Promise<[string]>;

    priceAtLastHedge(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceHedge(
      _auctionTriggerTime: BigNumberish,
      _isStrategySellingWSqueeth: boolean,
      _limitPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceHedgeOnUniswap(
      _auctionTriggerTime: BigNumberish,
      _minWSqueeth: BigNumberish,
      _minEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quoteCurrency(overrides?: CallOverrides): Promise<[string]>;

    redeemShortShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionTime(
      _auctionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDeltaHedgeThreshold(
      _deltaHedgeThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHedgePriceThreshold(
      _hedgePriceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHedgeTimeThreshold(
      _hedgeTimeThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHedgingTwapPeriod(
      _hedgingTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPriceMultiplier(
      _maxPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPriceMultiplier(
      _minPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategyCap(
      _capAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    timeAtLastHedge(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeHedge(
      _isStrategySellingWSqueeth: boolean,
      _limitPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeHedgeOnUniswap(
      _minWSqueeth: BigNumberish,
      _minEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultId(overrides?: CallOverrides): Promise<[BigNumber]>;

    wPowerPerp(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawShutdown(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  POWER_PERP_PERIOD(overrides?: CallOverrides): Promise<number>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionTime(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  checkPriceHedge(
    _auctionTriggerTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkTimeHedge(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deltaHedgeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethQuoteCurrencyPool(overrides?: CallOverrides): Promise<string>;

  ethWSqueethPool(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  flashDeposit(
    _ethToDeposit: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashWithdraw(
    _crabAmount: BigNumberish,
    _maxEthToPay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuctionDetails(
    _auctionTriggerTime: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber, BigNumber, boolean]>;

  getStrategyVaultId(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultDetails(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber, BigNumber]>;

  getWsqueethFromCrabAmount(
    _crabAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hedgePriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  hedgeTimeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  hedgingTwapPeriod(overrides?: CallOverrides): Promise<number>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  minPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  powerTokenController(overrides?: CallOverrides): Promise<string>;

  priceAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

  priceHedge(
    _auctionTriggerTime: BigNumberish,
    _isStrategySellingWSqueeth: boolean,
    _limitPrice: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceHedgeOnUniswap(
    _auctionTriggerTime: BigNumberish,
    _minWSqueeth: BigNumberish,
    _minEth: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quoteCurrency(overrides?: CallOverrides): Promise<string>;

  redeemShortShutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionTime(
    _auctionTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDeltaHedgeThreshold(
    _deltaHedgeThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHedgePriceThreshold(
    _hedgePriceThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHedgeTimeThreshold(
    _hedgeTimeThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHedgingTwapPeriod(
    _hedgingTwapPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPriceMultiplier(
    _maxPriceMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPriceMultiplier(
    _minPriceMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategyCap(
    _capAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyCap(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  timeAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

  timeHedge(
    _isStrategySellingWSqueeth: boolean,
    _limitPrice: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeHedgeOnUniswap(
    _minWSqueeth: BigNumberish,
    _minEth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultId(overrides?: CallOverrides): Promise<BigNumber>;

  wPowerPerp(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _crabAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawShutdown(
    _crabAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    POWER_PERP_PERIOD(overrides?: CallOverrides): Promise<number>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auctionTime(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkPriceHedge(
      _auctionTriggerTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkTimeHedge(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deltaHedgeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: CallOverrides): Promise<void>;

    ethQuoteCurrencyPool(overrides?: CallOverrides): Promise<string>;

    ethWSqueethPool(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    flashDeposit(
      _ethToDeposit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flashWithdraw(
      _crabAmount: BigNumberish,
      _maxEthToPay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuctionDetails(
      _auctionTriggerTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber, BigNumber, boolean]>;

    getStrategyVaultId(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultDetails(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, BigNumber]>;

    getWsqueethFromCrabAmount(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hedgePriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    hedgeTimeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    hedgingTwapPeriod(overrides?: CallOverrides): Promise<number>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    minPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    powerTokenController(overrides?: CallOverrides): Promise<string>;

    priceAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

    priceHedge(
      _auctionTriggerTime: BigNumberish,
      _isStrategySellingWSqueeth: boolean,
      _limitPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    priceHedgeOnUniswap(
      _auctionTriggerTime: BigNumberish,
      _minWSqueeth: BigNumberish,
      _minEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    quoteCurrency(overrides?: CallOverrides): Promise<string>;

    redeemShortShutdown(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAuctionTime(
      _auctionTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeltaHedgeThreshold(
      _deltaHedgeThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHedgePriceThreshold(
      _hedgePriceThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHedgeTimeThreshold(
      _hedgeTimeThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHedgingTwapPeriod(
      _hedgingTwapPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceMultiplier(
      _maxPriceMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPriceMultiplier(
      _minPriceMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyCap(
      _capAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyCap(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    timeAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

    timeHedge(
      _isStrategySellingWSqueeth: boolean,
      _limitPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timeHedgeOnUniswap(
      _minWSqueeth: BigNumberish,
      _minEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultId(overrides?: CallOverrides): Promise<BigNumber>;

    wPowerPerp(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawShutdown(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Deposit(address,uint256,uint256)"(
      depositor?: string | null,
      wSqueethAmount?: null,
      lpAmount?: null
    ): DepositEventFilter;
    Deposit(
      depositor?: string | null,
      wSqueethAmount?: null,
      lpAmount?: null
    ): DepositEventFilter;

    "ExecuteBuyAuction(address,uint256,uint256,bool)"(
      seller?: string | null,
      wSqueethBought?: null,
      ethSold?: null,
      isHedgingOnUniswap?: null
    ): ExecuteBuyAuctionEventFilter;
    ExecuteBuyAuction(
      seller?: string | null,
      wSqueethBought?: null,
      ethSold?: null,
      isHedgingOnUniswap?: null
    ): ExecuteBuyAuctionEventFilter;

    "ExecuteSellAuction(address,uint256,uint256,bool)"(
      buyer?: string | null,
      wSqueethSold?: null,
      ethBought?: null,
      isHedgingOnUniswap?: null
    ): ExecuteSellAuctionEventFilter;
    ExecuteSellAuction(
      buyer?: string | null,
      wSqueethSold?: null,
      ethBought?: null,
      isHedgingOnUniswap?: null
    ): ExecuteSellAuctionEventFilter;

    "FlashDeposit(address,uint256,uint256)"(
      depositor?: string | null,
      depositedAmount?: null,
      tradedAmountOut?: null
    ): FlashDepositEventFilter;
    FlashDeposit(
      depositor?: string | null,
      depositedAmount?: null,
      tradedAmountOut?: null
    ): FlashDepositEventFilter;

    "FlashDepositCallback(address,uint256,uint256)"(
      depositor?: string | null,
      flashswapDebt?: null,
      excess?: null
    ): FlashDepositCallbackEventFilter;
    FlashDepositCallback(
      depositor?: string | null,
      flashswapDebt?: null,
      excess?: null
    ): FlashDepositCallbackEventFilter;

    "FlashWithdraw(address,uint256,uint256)"(
      withdrawer?: string | null,
      crabAmount?: null,
      wSqueethAmount?: null
    ): FlashWithdrawEventFilter;
    FlashWithdraw(
      withdrawer?: string | null,
      crabAmount?: null,
      wSqueethAmount?: null
    ): FlashWithdrawEventFilter;

    "FlashWithdrawCallback(address,uint256,uint256)"(
      withdrawer?: string | null,
      flashswapDebt?: null,
      excess?: null
    ): FlashWithdrawCallbackEventFilter;
    FlashWithdrawCallback(
      withdrawer?: string | null,
      flashswapDebt?: null,
      excess?: null
    ): FlashWithdrawCallbackEventFilter;

    "Hedge(address,bool,uint256,uint256,uint256,uint256)"(
      hedger?: string | null,
      auctionType?: null,
      hedgerPrice?: null,
      auctionPrice?: null,
      wSqueethHedgeTargetAmount?: null,
      ethHedgetargetAmount?: null
    ): HedgeEventFilter;
    Hedge(
      hedger?: string | null,
      auctionType?: null,
      hedgerPrice?: null,
      auctionPrice?: null,
      wSqueethHedgeTargetAmount?: null,
      ethHedgetargetAmount?: null
    ): HedgeEventFilter;

    "HedgeOnUniswap(address,bool,uint256,uint256,uint256)"(
      hedger?: string | null,
      auctionType?: null,
      auctionPrice?: null,
      wSqueethHedgeTargetAmount?: null,
      ethHedgetargetAmount?: null
    ): HedgeOnUniswapEventFilter;
    HedgeOnUniswap(
      hedger?: string | null,
      auctionType?: null,
      auctionPrice?: null,
      wSqueethHedgeTargetAmount?: null,
      ethHedgetargetAmount?: null
    ): HedgeOnUniswapEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PriceHedge(address,bool,uint256,uint256)"(
      hedger?: string | null,
      auctionType?: null,
      hedgerPrice?: null,
      auctionTriggerTimestamp?: null
    ): PriceHedgeEventFilter;
    PriceHedge(
      hedger?: string | null,
      auctionType?: null,
      hedgerPrice?: null,
      auctionTriggerTimestamp?: null
    ): PriceHedgeEventFilter;

    "PriceHedgeOnUniswap(address,uint256,uint256,uint256,uint256)"(
      hedger?: string | null,
      hedgeTimestamp?: null,
      auctionTriggerTimestamp?: null,
      minWSqueeth?: null,
      minEth?: null
    ): PriceHedgeOnUniswapEventFilter;
    PriceHedgeOnUniswap(
      hedger?: string | null,
      hedgeTimestamp?: null,
      auctionTriggerTimestamp?: null,
      minWSqueeth?: null,
      minEth?: null
    ): PriceHedgeOnUniswapEventFilter;

    "SetAuctionTime(uint256)"(newAuctionTime?: null): SetAuctionTimeEventFilter;
    SetAuctionTime(newAuctionTime?: null): SetAuctionTimeEventFilter;

    "SetDeltaHedgeThreshold(uint256)"(
      newDeltaHedgeThreshold?: null
    ): SetDeltaHedgeThresholdEventFilter;
    SetDeltaHedgeThreshold(
      newDeltaHedgeThreshold?: null
    ): SetDeltaHedgeThresholdEventFilter;

    "SetHedgePriceThreshold(uint256)"(
      newHedgePriceThreshold?: null
    ): SetHedgePriceThresholdEventFilter;
    SetHedgePriceThreshold(
      newHedgePriceThreshold?: null
    ): SetHedgePriceThresholdEventFilter;

    "SetHedgeTimeThreshold(uint256)"(
      newHedgeTimeThreshold?: null
    ): SetHedgeTimeThresholdEventFilter;
    SetHedgeTimeThreshold(
      newHedgeTimeThreshold?: null
    ): SetHedgeTimeThresholdEventFilter;

    "SetHedgingTwapPeriod(uint32)"(
      newHedgingTwapPeriod?: null
    ): SetHedgingTwapPeriodEventFilter;
    SetHedgingTwapPeriod(
      newHedgingTwapPeriod?: null
    ): SetHedgingTwapPeriodEventFilter;

    "SetMaxPriceMultiplier(uint256)"(
      newMaxPriceMultiplier?: null
    ): SetMaxPriceMultiplierEventFilter;
    SetMaxPriceMultiplier(
      newMaxPriceMultiplier?: null
    ): SetMaxPriceMultiplierEventFilter;

    "SetMinPriceMultiplier(uint256)"(
      newMinPriceMultiplier?: null
    ): SetMinPriceMultiplierEventFilter;
    SetMinPriceMultiplier(
      newMinPriceMultiplier?: null
    ): SetMinPriceMultiplierEventFilter;

    "SetStrategyCap(uint256)"(newCapAmount?: null): SetStrategyCapEventFilter;
    SetStrategyCap(newCapAmount?: null): SetStrategyCapEventFilter;

    "TimeHedge(address,bool,uint256,uint256)"(
      hedger?: string | null,
      auctionType?: null,
      hedgerPrice?: null,
      auctionTriggerTimestamp?: null
    ): TimeHedgeEventFilter;
    TimeHedge(
      hedger?: string | null,
      auctionType?: null,
      hedgerPrice?: null,
      auctionTriggerTimestamp?: null
    ): TimeHedgeEventFilter;

    "TimeHedgeOnUniswap(address,uint256,uint256,uint256,uint256)"(
      hedger?: string | null,
      hedgeTimestamp?: null,
      auctionTriggerTimestamp?: null,
      minWSqueeth?: null,
      minEth?: null
    ): TimeHedgeOnUniswapEventFilter;
    TimeHedgeOnUniswap(
      hedger?: string | null,
      hedgeTimestamp?: null,
      auctionTriggerTimestamp?: null,
      minWSqueeth?: null,
      minEth?: null
    ): TimeHedgeOnUniswapEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdraw(address,uint256,uint256,uint256)"(
      withdrawer?: string | null,
      crabAmount?: null,
      wSqueethAmount?: null,
      ethWithdrawn?: null
    ): WithdrawEventFilter;
    Withdraw(
      withdrawer?: string | null,
      crabAmount?: null,
      wSqueethAmount?: null,
      ethWithdrawn?: null
    ): WithdrawEventFilter;

    "WithdrawShutdown(address,uint256,uint256)"(
      withdrawer?: string | null,
      crabAmount?: null,
      ethWithdrawn?: null
    ): WithdrawShutdownEventFilter;
    WithdrawShutdown(
      withdrawer?: string | null,
      crabAmount?: null,
      ethWithdrawn?: null
    ): WithdrawShutdownEventFilter;
  };

  estimateGas: {
    POWER_PERP_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionTime(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkPriceHedge(
      _auctionTriggerTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkTimeHedge(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deltaHedgeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethQuoteCurrencyPool(overrides?: CallOverrides): Promise<BigNumber>;

    ethWSqueethPool(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    flashDeposit(
      _ethToDeposit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashWithdraw(
      _crabAmount: BigNumberish,
      _maxEthToPay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuctionDetails(
      _auctionTriggerTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrategyVaultId(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultDetails(overrides?: CallOverrides): Promise<BigNumber>;

    getWsqueethFromCrabAmount(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hedgePriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    hedgeTimeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    hedgingTwapPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    minPriceMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    powerTokenController(overrides?: CallOverrides): Promise<BigNumber>;

    priceAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

    priceHedge(
      _auctionTriggerTime: BigNumberish,
      _isStrategySellingWSqueeth: boolean,
      _limitPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceHedgeOnUniswap(
      _auctionTriggerTime: BigNumberish,
      _minWSqueeth: BigNumberish,
      _minEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quoteCurrency(overrides?: CallOverrides): Promise<BigNumber>;

    redeemShortShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionTime(
      _auctionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDeltaHedgeThreshold(
      _deltaHedgeThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHedgePriceThreshold(
      _hedgePriceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHedgeTimeThreshold(
      _hedgeTimeThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHedgingTwapPeriod(
      _hedgingTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPriceMultiplier(
      _maxPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPriceMultiplier(
      _minPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategyCap(
      _capAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyCap(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    timeAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

    timeHedge(
      _isStrategySellingWSqueeth: boolean,
      _limitPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeHedgeOnUniswap(
      _minWSqueeth: BigNumberish,
      _minEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultId(overrides?: CallOverrides): Promise<BigNumber>;

    wPowerPerp(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawShutdown(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    POWER_PERP_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkPriceHedge(
      _auctionTriggerTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkTimeHedge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deltaHedgeThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethQuoteCurrencyPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethWSqueethPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashDeposit(
      _ethToDeposit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashWithdraw(
      _crabAmount: BigNumberish,
      _maxEthToPay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuctionDetails(
      _auctionTriggerTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrategyVaultId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWsqueethFromCrabAmount(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hedgePriceThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hedgeTimeThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hedgingTwapPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxPriceMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPriceMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerTokenController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceAtLastHedge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceHedge(
      _auctionTriggerTime: BigNumberish,
      _isStrategySellingWSqueeth: boolean,
      _limitPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceHedgeOnUniswap(
      _auctionTriggerTime: BigNumberish,
      _minWSqueeth: BigNumberish,
      _minEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quoteCurrency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemShortShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionTime(
      _auctionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDeltaHedgeThreshold(
      _deltaHedgeThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHedgePriceThreshold(
      _hedgePriceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHedgeTimeThreshold(
      _hedgeTimeThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHedgingTwapPeriod(
      _hedgingTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPriceMultiplier(
      _maxPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPriceMultiplier(
      _minPriceMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyCap(
      _capAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeAtLastHedge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeHedge(
      _isStrategySellingWSqueeth: boolean,
      _limitPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeHedgeOnUniswap(
      _minWSqueeth: BigNumberish,
      _minEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wPowerPerp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawShutdown(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
