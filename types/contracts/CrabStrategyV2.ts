/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace CrabStrategyV2 {
  export type OrderStruct = {
    bidId: BigNumberish;
    trader: string;
    quantity: BigNumberish;
    price: BigNumberish;
    isBuying: boolean;
    expiry: BigNumberish;
    nonce: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type OrderStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ] & {
    bidId: BigNumber;
    trader: string;
    quantity: BigNumber;
    price: BigNumber;
    isBuying: boolean;
    expiry: BigNumber;
    nonce: BigNumber;
    v: number;
    r: string;
    s: string;
  };
}

export interface CrabStrategyV2Interface extends utils.Interface {
  contractName: "CrabStrategyV2";
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MAX_OTC_PRICE_TOLERANCE()": FunctionFragment;
    "POWER_PERP_PERIOD()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "checkPriceHedge()": FunctionFragment;
    "checkTimeHedge()": FunctionFragment;
    "crabMigration()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit()": FunctionFragment;
    "ethWSqueethPool()": FunctionFragment;
    "factory()": FunctionFragment;
    "flashDeposit(uint256,uint24)": FunctionFragment;
    "flashWithdraw(uint256,uint256,uint24)": FunctionFragment;
    "getStrategyVaultId()": FunctionFragment;
    "getVaultDetails()": FunctionFragment;
    "getWsqueethFromCrabAmount(uint256)": FunctionFragment;
    "hedgeOTC(uint256,uint256,bool,(uint256,address,uint256,uint256,bool,uint256,uint256,uint8,bytes32,bytes32)[])": FunctionFragment;
    "hedgePriceThreshold()": FunctionFragment;
    "hedgeTimeThreshold()": FunctionFragment;
    "hedgingTwapPeriod()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address,uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "otcPriceTolerance()": FunctionFragment;
    "owner()": FunctionFragment;
    "powerTokenController()": FunctionFragment;
    "priceAtLastHedge()": FunctionFragment;
    "redeemShortShutdown()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setHedgePriceThreshold(uint256)": FunctionFragment;
    "setHedgeTimeThreshold(uint256)": FunctionFragment;
    "setHedgingTwapPeriod(uint32)": FunctionFragment;
    "setNonceTrue(uint256)": FunctionFragment;
    "setOTCPriceTolerance(uint256)": FunctionFragment;
    "setStrategyCap(uint256)": FunctionFragment;
    "strategyCap()": FunctionFragment;
    "symbol()": FunctionFragment;
    "timeAtLastHedge()": FunctionFragment;
    "timelock()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferVault(address)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "vaultId()": FunctionFragment;
    "wPowerPerp()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawShutdown(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OTC_PRICE_TOLERANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POWER_PERP_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkPriceHedge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkTimeHedge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crabMigration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ethWSqueethPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flashDeposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashWithdraw",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyVaultId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWsqueethFromCrabAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hedgeOTC",
    values: [BigNumberish, BigNumberish, boolean, CrabStrategyV2.OrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hedgePriceThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hedgeTimeThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hedgingTwapPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "otcPriceTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "powerTokenController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceAtLastHedge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemShortShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHedgePriceThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHedgeTimeThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHedgingTwapPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonceTrue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOTCPriceTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategyCap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeAtLastHedge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vaultId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wPowerPerp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawShutdown",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OTC_PRICE_TOLERANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POWER_PERP_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkPriceHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTimeHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crabMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethWSqueethPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flashDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyVaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWsqueethFromCrabAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hedgeOTC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hedgePriceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hedgeTimeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hedgingTwapPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "otcPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "powerTokenController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceAtLastHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemShortShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHedgePriceThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHedgeTimeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHedgingTwapPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonceTrue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOTCPriceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeAtLastHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wPowerPerp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawShutdown",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "FlashDeposit(address,uint256,uint256)": EventFragment;
    "FlashDepositCallback(address,uint256,uint256)": EventFragment;
    "FlashWithdraw(address,uint256,uint256)": EventFragment;
    "FlashWithdrawCallback(address,uint256,uint256)": EventFragment;
    "HedgeOTC(uint256,uint256,bool,uint256)": EventFragment;
    "HedgeOTCSingle(address,uint256,uint256,uint256,bool,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetHedgePriceThreshold(uint256)": EventFragment;
    "SetHedgeTimeThreshold(uint256)": EventFragment;
    "SetHedgingTwapPeriod(uint32)": EventFragment;
    "SetOTCPriceTolerance(uint256)": EventFragment;
    "SetStrategyCap(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VaultTransferred(address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
    "WithdrawShutdown(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashDepositCallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashWithdrawCallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HedgeOTC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HedgeOTCSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHedgePriceThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHedgeTimeThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHedgingTwapPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOTCPriceTolerance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStrategyCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawShutdown"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { depositor: string; wSqueethAmount: BigNumber; lpAmount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type FlashDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { depositor: string; depositedAmount: BigNumber; tradedAmountOut: BigNumber }
>;

export type FlashDepositEventFilter = TypedEventFilter<FlashDepositEvent>;

export type FlashDepositCallbackEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { depositor: string; flashswapDebt: BigNumber; excess: BigNumber }
>;

export type FlashDepositCallbackEventFilter =
  TypedEventFilter<FlashDepositCallbackEvent>;

export type FlashWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { withdrawer: string; crabAmount: BigNumber; wSqueethAmount: BigNumber }
>;

export type FlashWithdrawEventFilter = TypedEventFilter<FlashWithdrawEvent>;

export type FlashWithdrawCallbackEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { withdrawer: string; flashswapDebt: BigNumber; excess: BigNumber }
>;

export type FlashWithdrawCallbackEventFilter =
  TypedEventFilter<FlashWithdrawCallbackEvent>;

export type HedgeOTCEvent = TypedEvent<
  [BigNumber, BigNumber, boolean, BigNumber],
  {
    bidId: BigNumber;
    quantity: BigNumber;
    isBuying: boolean;
    clearingPrice: BigNumber;
  }
>;

export type HedgeOTCEventFilter = TypedEventFilter<HedgeOTCEvent>;

export type HedgeOTCSingleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean, BigNumber],
  {
    trader: string;
    bidId: BigNumber;
    quantity: BigNumber;
    price: BigNumber;
    isBuying: boolean;
    clearingPrice: BigNumber;
  }
>;

export type HedgeOTCSingleEventFilter = TypedEventFilter<HedgeOTCSingleEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SetHedgePriceThresholdEvent = TypedEvent<
  [BigNumber],
  { newHedgePriceThreshold: BigNumber }
>;

export type SetHedgePriceThresholdEventFilter =
  TypedEventFilter<SetHedgePriceThresholdEvent>;

export type SetHedgeTimeThresholdEvent = TypedEvent<
  [BigNumber],
  { newHedgeTimeThreshold: BigNumber }
>;

export type SetHedgeTimeThresholdEventFilter =
  TypedEventFilter<SetHedgeTimeThresholdEvent>;

export type SetHedgingTwapPeriodEvent = TypedEvent<
  [number],
  { newHedgingTwapPeriod: number }
>;

export type SetHedgingTwapPeriodEventFilter =
  TypedEventFilter<SetHedgingTwapPeriodEvent>;

export type SetOTCPriceToleranceEvent = TypedEvent<
  [BigNumber],
  { otcPriceTolerance: BigNumber }
>;

export type SetOTCPriceToleranceEventFilter =
  TypedEventFilter<SetOTCPriceToleranceEvent>;

export type SetStrategyCapEvent = TypedEvent<
  [BigNumber],
  { newCapAmount: BigNumber }
>;

export type SetStrategyCapEventFilter = TypedEventFilter<SetStrategyCapEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type VaultTransferredEvent = TypedEvent<
  [string, BigNumber],
  { newStrategy: string; vaultId: BigNumber }
>;

export type VaultTransferredEventFilter =
  TypedEventFilter<VaultTransferredEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    withdrawer: string;
    crabAmount: BigNumber;
    wSqueethAmount: BigNumber;
    ethWithdrawn: BigNumber;
  }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export type WithdrawShutdownEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { withdrawer: string; crabAmount: BigNumber; ethWithdrawn: BigNumber }
>;

export type WithdrawShutdownEventFilter =
  TypedEventFilter<WithdrawShutdownEvent>;

export interface CrabStrategyV2 extends BaseContract {
  contractName: "CrabStrategyV2";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrabStrategyV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    POWER_PERP_PERIOD(overrides?: CallOverrides): Promise<[number]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    checkPriceHedge(overrides?: CallOverrides): Promise<[boolean]>;

    checkTimeHedge(overrides?: CallOverrides): Promise<[boolean]>;

    crabMigration(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethWSqueethPool(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    flashDeposit(
      _ethToDeposit: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashWithdraw(
      _crabAmount: BigNumberish,
      _maxEthToPay: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStrategyVaultId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVaultDetails(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, BigNumber]>;

    getWsqueethFromCrabAmount(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hedgeOTC(
      _totalQuantity: BigNumberish,
      _clearingPrice: BigNumberish,
      _isHedgeBuying: boolean,
      _orders: CrabStrategyV2.OrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hedgePriceThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    hedgeTimeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    hedgingTwapPeriod(overrides?: CallOverrides): Promise<[number]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _wSqueethToMint: BigNumberish,
      _crabSharesToMint: BigNumberish,
      _timeAtLastHedge: BigNumberish,
      _priceAtLastHedge: BigNumberish,
      _strategyCap: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    powerTokenController(overrides?: CallOverrides): Promise<[string]>;

    priceAtLastHedge(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemShortShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHedgePriceThreshold(
      _hedgePriceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHedgeTimeThreshold(
      _hedgeTimeThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHedgingTwapPeriod(
      _hedgingTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategyCap(
      _capAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    timeAtLastHedge(overrides?: CallOverrides): Promise<[BigNumber]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferVault(
      _newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultId(overrides?: CallOverrides): Promise<[BigNumber]>;

    wPowerPerp(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawShutdown(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

  POWER_PERP_PERIOD(overrides?: CallOverrides): Promise<number>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  checkPriceHedge(overrides?: CallOverrides): Promise<boolean>;

  checkTimeHedge(overrides?: CallOverrides): Promise<boolean>;

  crabMigration(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethWSqueethPool(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  flashDeposit(
    _ethToDeposit: BigNumberish,
    _poolFee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashWithdraw(
    _crabAmount: BigNumberish,
    _maxEthToPay: BigNumberish,
    _poolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStrategyVaultId(overrides?: CallOverrides): Promise<BigNumber>;

  getVaultDetails(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber, BigNumber]>;

  getWsqueethFromCrabAmount(
    _crabAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hedgeOTC(
    _totalQuantity: BigNumberish,
    _clearingPrice: BigNumberish,
    _isHedgeBuying: boolean,
    _orders: CrabStrategyV2.OrderStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hedgePriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  hedgeTimeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  hedgingTwapPeriod(overrides?: CallOverrides): Promise<number>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _wSqueethToMint: BigNumberish,
    _crabSharesToMint: BigNumberish,
    _timeAtLastHedge: BigNumberish,
    _priceAtLastHedge: BigNumberish,
    _strategyCap: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracle(overrides?: CallOverrides): Promise<string>;

  otcPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  powerTokenController(overrides?: CallOverrides): Promise<string>;

  priceAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

  redeemShortShutdown(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHedgePriceThreshold(
    _hedgePriceThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHedgeTimeThreshold(
    _hedgeTimeThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHedgingTwapPeriod(
    _hedgingTwapPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNonceTrue(
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOTCPriceTolerance(
    _otcPriceTolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategyCap(
    _capAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyCap(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  timeAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

  timelock(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferVault(
    _newStrategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultId(overrides?: CallOverrides): Promise<BigNumber>;

  wPowerPerp(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _crabAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawShutdown(
    _crabAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    POWER_PERP_PERIOD(overrides?: CallOverrides): Promise<number>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkPriceHedge(overrides?: CallOverrides): Promise<boolean>;

    checkTimeHedge(overrides?: CallOverrides): Promise<boolean>;

    crabMigration(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(overrides?: CallOverrides): Promise<void>;

    ethWSqueethPool(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    flashDeposit(
      _ethToDeposit: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flashWithdraw(
      _crabAmount: BigNumberish,
      _maxEthToPay: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getStrategyVaultId(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultDetails(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, BigNumber]>;

    getWsqueethFromCrabAmount(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hedgeOTC(
      _totalQuantity: BigNumberish,
      _clearingPrice: BigNumberish,
      _isHedgeBuying: boolean,
      _orders: CrabStrategyV2.OrderStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    hedgePriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    hedgeTimeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    hedgingTwapPeriod(overrides?: CallOverrides): Promise<number>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _wSqueethToMint: BigNumberish,
      _crabSharesToMint: BigNumberish,
      _timeAtLastHedge: BigNumberish,
      _priceAtLastHedge: BigNumberish,
      _strategyCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracle(overrides?: CallOverrides): Promise<string>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    powerTokenController(overrides?: CallOverrides): Promise<string>;

    priceAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

    redeemShortShutdown(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setHedgePriceThreshold(
      _hedgePriceThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHedgeTimeThreshold(
      _hedgeTimeThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHedgingTwapPeriod(
      _hedgingTwapPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyCap(
      _capAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyCap(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    timeAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferVault(
      _newStrategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultId(overrides?: CallOverrides): Promise<BigNumber>;

    wPowerPerp(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawShutdown(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Deposit(address,uint256,uint256)"(
      depositor?: string | null,
      wSqueethAmount?: null,
      lpAmount?: null
    ): DepositEventFilter;
    Deposit(
      depositor?: string | null,
      wSqueethAmount?: null,
      lpAmount?: null
    ): DepositEventFilter;

    "FlashDeposit(address,uint256,uint256)"(
      depositor?: string | null,
      depositedAmount?: null,
      tradedAmountOut?: null
    ): FlashDepositEventFilter;
    FlashDeposit(
      depositor?: string | null,
      depositedAmount?: null,
      tradedAmountOut?: null
    ): FlashDepositEventFilter;

    "FlashDepositCallback(address,uint256,uint256)"(
      depositor?: string | null,
      flashswapDebt?: null,
      excess?: null
    ): FlashDepositCallbackEventFilter;
    FlashDepositCallback(
      depositor?: string | null,
      flashswapDebt?: null,
      excess?: null
    ): FlashDepositCallbackEventFilter;

    "FlashWithdraw(address,uint256,uint256)"(
      withdrawer?: string | null,
      crabAmount?: null,
      wSqueethAmount?: null
    ): FlashWithdrawEventFilter;
    FlashWithdraw(
      withdrawer?: string | null,
      crabAmount?: null,
      wSqueethAmount?: null
    ): FlashWithdrawEventFilter;

    "FlashWithdrawCallback(address,uint256,uint256)"(
      withdrawer?: string | null,
      flashswapDebt?: null,
      excess?: null
    ): FlashWithdrawCallbackEventFilter;
    FlashWithdrawCallback(
      withdrawer?: string | null,
      flashswapDebt?: null,
      excess?: null
    ): FlashWithdrawCallbackEventFilter;

    "HedgeOTC(uint256,uint256,bool,uint256)"(
      bidId?: null,
      quantity?: null,
      isBuying?: null,
      clearingPrice?: null
    ): HedgeOTCEventFilter;
    HedgeOTC(
      bidId?: null,
      quantity?: null,
      isBuying?: null,
      clearingPrice?: null
    ): HedgeOTCEventFilter;

    "HedgeOTCSingle(address,uint256,uint256,uint256,bool,uint256)"(
      trader?: null,
      bidId?: null,
      quantity?: null,
      price?: null,
      isBuying?: null,
      clearingPrice?: null
    ): HedgeOTCSingleEventFilter;
    HedgeOTCSingle(
      trader?: null,
      bidId?: null,
      quantity?: null,
      price?: null,
      isBuying?: null,
      clearingPrice?: null
    ): HedgeOTCSingleEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetHedgePriceThreshold(uint256)"(
      newHedgePriceThreshold?: null
    ): SetHedgePriceThresholdEventFilter;
    SetHedgePriceThreshold(
      newHedgePriceThreshold?: null
    ): SetHedgePriceThresholdEventFilter;

    "SetHedgeTimeThreshold(uint256)"(
      newHedgeTimeThreshold?: null
    ): SetHedgeTimeThresholdEventFilter;
    SetHedgeTimeThreshold(
      newHedgeTimeThreshold?: null
    ): SetHedgeTimeThresholdEventFilter;

    "SetHedgingTwapPeriod(uint32)"(
      newHedgingTwapPeriod?: null
    ): SetHedgingTwapPeriodEventFilter;
    SetHedgingTwapPeriod(
      newHedgingTwapPeriod?: null
    ): SetHedgingTwapPeriodEventFilter;

    "SetOTCPriceTolerance(uint256)"(
      otcPriceTolerance?: null
    ): SetOTCPriceToleranceEventFilter;
    SetOTCPriceTolerance(
      otcPriceTolerance?: null
    ): SetOTCPriceToleranceEventFilter;

    "SetStrategyCap(uint256)"(newCapAmount?: null): SetStrategyCapEventFilter;
    SetStrategyCap(newCapAmount?: null): SetStrategyCapEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "VaultTransferred(address,uint256)"(
      newStrategy?: string | null,
      vaultId?: null
    ): VaultTransferredEventFilter;
    VaultTransferred(
      newStrategy?: string | null,
      vaultId?: null
    ): VaultTransferredEventFilter;

    "Withdraw(address,uint256,uint256,uint256)"(
      withdrawer?: string | null,
      crabAmount?: null,
      wSqueethAmount?: null,
      ethWithdrawn?: null
    ): WithdrawEventFilter;
    Withdraw(
      withdrawer?: string | null,
      crabAmount?: null,
      wSqueethAmount?: null,
      ethWithdrawn?: null
    ): WithdrawEventFilter;

    "WithdrawShutdown(address,uint256,uint256)"(
      withdrawer?: string | null,
      crabAmount?: null,
      ethWithdrawn?: null
    ): WithdrawShutdownEventFilter;
    WithdrawShutdown(
      withdrawer?: string | null,
      crabAmount?: null,
      ethWithdrawn?: null
    ): WithdrawShutdownEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_OTC_PRICE_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    POWER_PERP_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkPriceHedge(overrides?: CallOverrides): Promise<BigNumber>;

    checkTimeHedge(overrides?: CallOverrides): Promise<BigNumber>;

    crabMigration(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethWSqueethPool(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    flashDeposit(
      _ethToDeposit: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashWithdraw(
      _crabAmount: BigNumberish,
      _maxEthToPay: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStrategyVaultId(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultDetails(overrides?: CallOverrides): Promise<BigNumber>;

    getWsqueethFromCrabAmount(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hedgeOTC(
      _totalQuantity: BigNumberish,
      _clearingPrice: BigNumberish,
      _isHedgeBuying: boolean,
      _orders: CrabStrategyV2.OrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hedgePriceThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    hedgeTimeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    hedgingTwapPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _wSqueethToMint: BigNumberish,
      _crabSharesToMint: BigNumberish,
      _timeAtLastHedge: BigNumberish,
      _priceAtLastHedge: BigNumberish,
      _strategyCap: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    powerTokenController(overrides?: CallOverrides): Promise<BigNumber>;

    priceAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

    redeemShortShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHedgePriceThreshold(
      _hedgePriceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHedgeTimeThreshold(
      _hedgeTimeThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHedgingTwapPeriod(
      _hedgingTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategyCap(
      _capAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyCap(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    timeAtLastHedge(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferVault(
      _newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultId(overrides?: CallOverrides): Promise<BigNumber>;

    wPowerPerp(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawShutdown(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_OTC_PRICE_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POWER_PERP_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkPriceHedge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkTimeHedge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crabMigration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethWSqueethPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashDeposit(
      _ethToDeposit: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashWithdraw(
      _crabAmount: BigNumberish,
      _maxEthToPay: BigNumberish,
      _poolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStrategyVaultId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWsqueethFromCrabAmount(
      _crabAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hedgeOTC(
      _totalQuantity: BigNumberish,
      _clearingPrice: BigNumberish,
      _isHedgeBuying: boolean,
      _orders: CrabStrategyV2.OrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hedgePriceThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hedgeTimeThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hedgingTwapPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _wSqueethToMint: BigNumberish,
      _crabSharesToMint: BigNumberish,
      _timeAtLastHedge: BigNumberish,
      _priceAtLastHedge: BigNumberish,
      _strategyCap: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otcPriceTolerance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    powerTokenController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceAtLastHedge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemShortShutdown(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHedgePriceThreshold(
      _hedgePriceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHedgeTimeThreshold(
      _hedgeTimeThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHedgingTwapPeriod(
      _hedgingTwapPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNonceTrue(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOTCPriceTolerance(
      _otcPriceTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyCap(
      _capAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeAtLastHedge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferVault(
      _newStrategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wPowerPerp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawShutdown(
      _crabAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
